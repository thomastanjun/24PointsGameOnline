{"version":3,"sources":["services/GameClient.ts","contexts/GameClientContext.tsx","components/GameStyles.tsx","pages/LoginPage.tsx","hooks/useOnlinePlayerCount.ts","pages/ModeSelection.tsx","pages/RoomSelection.tsx","components/GameButtons.tsx","pages/GamePageSingle.tsx","pages/GamePageMulti.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameMode","GameClient","constructor","playerName","_baseURL","_playerName","_cells","_gameNumbers","_gameStatus","_roomID","_gameMode","_rooms","this","gameStatus","winner","winnerFormula","console","log","getOnlinePlayerNumber","response","fetch","ok","error","status","statusText","Error","json","verifyPlayerName","errorData","message","createRoom","maxPlayers","method","roomID","text","SINGLE","fetchRooms","joinGame","data","_updateGameState","leaveGame","addToken","token","headers","body","removeToken","clearFormula","startNewGame","fetchGamePage","setRoomID","getCurrentPlayerFormula","_this$_cells$this$_pl","formula","getCurrentPlayerResult","_this$_cells$this$_pl2","value","getCurrentPlayerError","_this$_cells$this$_pl3","getGameNumbersString","isGameFinished","getWinner","getWinnerFormula","getGameStatus","getPlayerName","players","gameNumbers","resetClient","GameClientContext","createContext","client","setGameClient","GameClientProvider","_ref","children","useState","_jsx","Provider","LoginContainer","styled","div","GameTitle","h1","SubTitle","p","Card","WelcomeText","h2","LoginForm","form","InputGroup","Label","label","SubmitButton","input","button","GameRules","RulesTitle","h3","RulesList","Rule","OnlinePlayersBox","OnlineDot","OnlineCount","span","Container","Header","header","Title","FormulaDisplay","ResultDisplay","Input","WinnerDisplay","WinnerFormula","PlayerName","GameAreaSingle","GameAreaMulti","CurrentPlayerAreaSingle","CurrentPlayerAreaMulti","OtherPlayersArea","PlayerCard","PlayerHeader","LoginPage","useContext","navigate","useNavigate","setPlayerName","onlinePlayers","useOnlinePlayerCount","setOnlinePlayers","useEffect","fetchCount","async","count","interval","setInterval","clearInterval","_jsxs","onSubmit","e","preventDefault","trim","alert","onChange","target","placeholder","required","type","ModeButton","ModeDescription","ModeSelection","location","useLocation","state","onClick","mode","handleSingleMode","RoomList","RoomCard","Button","RoomSelection","rooms","setRooms","roomList","length","roomIDResponse","maxPlayer","map","room","hostPlayer","vacancySeats","handleRoomClick","NumberButton","OperatorButton","ControlButton","NumbersGrid","OperatorGrid","QuitButton","ButtonGroup","GamePageSingle","setFormula","result","setResult","setGameNumbers","setWinner","setWinnerFormula","setStatus","isCountingDown","setIsCountingDown","setCount","updateDisplay","timer","setTimeout","prev","clearTimeout","resetGameState","handleTokenClick","_Fragment","className","num","index","op","GamePageMulti","Object","entries","filter","name","_ref2","cell","App","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.8b33536a.chunk.js","sourcesContent":["import { PageInfo, CellInfo, GameStatusInfo } from '../GameDefinitions';\nimport { Rooms } from '../GameDefinitions';\n\ninterface ErrorResponse {\n    message: string;\n    code: string;\n    timestamp: number;\n}\n\nexport enum GameMode {\n    SINGLE = 'SINGLE',\n    MULTI = 'MULTI'\n}\n\nclass GameClient {\n    private _baseURL: string;\n    private _playerName: string; \n    private _cells: {[playerName: string]: CellInfo};\n    private _gameNumbers: string[];\n    private _gameStatus: GameStatusInfo;\n    private _roomID: string | null;\n    private _gameMode: GameMode | null;\n\n    private _rooms: {[roomID: string]: string};\n\n    constructor(playerName: string) {\n        this._baseURL = 'http://localhost:8080/game';\n        this._playerName = playerName;\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n        console.log(\"GameClient initialized with player:\", playerName);\n\n        this._rooms = {};\n    }\n\n    // Core game operations\n    public async getOnlinePlayerNumber(): Promise<number> {\n        try {\n            const response = await fetch('${this._baseURL/players/count}');\n\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n            \n        } catch (error) {\n            console.error('Error fetching online player number:', error);\n            throw error;\n        }\n    }\n\n\n    public async verifyPlayerName(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/${this._playerName}`); \n\n            \n            if (!response.ok) {\n                if (response.status === 409) {\n                    const errorData: ErrorResponse = await response.json();\n                    throw new Error(errorData.message);\n                } else {\n                    throw new Error('Unexpected error: '+ response.status);\n                }\n            }\n        } catch (error) {\n            console.error('Player Already logged in:', error);\n            throw error;\n        }\n    }\n\n    public async createRoom(maxPlayers: string): Promise<string> {\n        try {\n            console.log(\"creating game\");\n            const response = await fetch(`${this._baseURL}/room/${maxPlayers}`, {\n                method: 'POST'\n            });\n            const roomID = await response.text();\n            this._roomID = roomID;\n            console.log(\"GameClient roomID\", roomID);\n\n            this._gameMode = GameMode.SINGLE ;\n            return roomID;\n        } catch (error) {\n            console.error('Error creating room:', error);\n            throw error;\n        }\n    }\n\n    public async fetchRooms(): Promise<Rooms> {\n        try {\n            const response = await fetch(`${this._baseURL}/rooms/available`);\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching rooms:', error);\n            throw error;\n        }\n    }\n\n    public async joinGame(roomID: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${roomID}/add/player/${this._playerName}`, {\n                method: 'PUT'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n            this._roomID = roomID;\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error joining game:', error);\n            throw error;\n        }\n    }\n\n    public async leaveGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/remove/player/${this._playerName}`, {\n                method: 'DELETE'\n            });\n            this._roomID = null;\n            \n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n\n        } catch (error) {\n            console.error('Error quitting game:', error);\n            throw error;\n        }\n    }\n\n    public async addToken(token: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/add/token/${this._playerName}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'text/plain'\n                },\n                body: token\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error adding token:', error);\n            throw error;\n        }\n    }\n\n    public async removeToken(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/remove/token/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after remove\", data);\n        } catch (error) {\n            console.error('Error removing token:', error);\n            throw error;\n        }\n    }\n\n    public async clearFormula(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/clear/formula/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after clear\", data);\n        } catch (error) {\n            console.error('Error clearing formula:', error);\n            throw error;\n        }\n    }\n\n    public async startNewGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/newgame/game1`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error starting new game:', error);\n            throw error;\n        }\n    }\n\n    public async fetchGamePage(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/state`);\n            \n            const data = await response.json();\n            console.log(\"fetch\", response);\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            throw error;\n        }\n    }\n\n    public setRoomID(roomID: string): void {\n        this._roomID = roomID;\n    }\n\n    public getCurrentPlayerFormula(): string {\n        return this._cells[this._playerName]?.formula || '';\n    }\n\n    public getCurrentPlayerResult(): string {\n        return this._cells[this._playerName]?.value || '0';\n    }\n\n    public getCurrentPlayerError(): string {\n        return this._cells[this._playerName]?.value || '';\n    }\n\n    public getGameNumbersString(): string[] {\n        return this._gameNumbers;\n    }\n\n    public isGameFinished(): boolean {\n        return this._gameStatus.gameStatus === 'true';\n    }\n\n    public getWinner(): string {\n        return this._gameStatus.winner;\n    }\n\n    public getWinnerFormula(): string {\n        return this._gameStatus.winnerFormula;\n    }\n\n    public getGameStatus(): string {\n        return this._gameStatus.gameStatus;\n    }\n\n    public getPlayerName(): string {\n        return this._playerName;\n    }\n\n    private _updateGameState(data: PageInfo): void {\n        this._cells = data.players;\n        this._gameNumbers = data.gameNumbers;\n        this._gameStatus = data.gameStatus;\n    }\n\n    public resetClient(): void {\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n    }\n\n}\n\nexport default GameClient;","import React, { createContext, useState } from 'react';\nimport GameClient from '../services/GameClient';\nimport { GameClientProviderProps } from '../types/GameClientProviderProps';\n\ntype GameClientContextType = {\n    client: GameClient | null;\n    setGameClient: (client: GameClient) => void;\n  };\n  \n  export const GameClientContext = createContext<GameClientContextType>({\n    client: null,\n    setGameClient: () => {},\n  });\n  \n  export const GameClientProvider: React.FC<GameClientProviderProps> = ({ children }) => {\n    const [client, setGameClient] = useState<GameClient | null>(null);\n  \n    return (\n      <GameClientContext.Provider value={{ client, setGameClient }}>\n        {children}\n      </GameClientContext.Provider>\n    );\n  };","import styled from 'styled-components';\n\n\n//Login Page\nexport const LoginContainer = styled.div`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n    padding: 20px;\n`;\n\nexport const GameTitle = styled.h1`\n    font-size: 4rem;\n    color: #fff;\n    margin-bottom: 0.5rem;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n`;\n\nexport const SubTitle = styled.p`\n    font-size: 1.2rem;\n    color: #e2e8f0;\n    margin-bottom: 2rem;\n`;\n\nexport const Card = styled.div`\n    background: rgba(255, 255, 255, 0.95);\n    padding: 2rem;\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n    width: 100%;\n    max-width: 400px;\n`;\n\nexport const WelcomeText = styled.h2`\n    text-align: center;\n    color: #2d3748;\n    margin-bottom: 1.5rem;\n    font-size: 1.8rem;\n`;\n\nexport const LoginForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n`;\n\nexport const InputGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nexport const Label = styled.label`\n    color: #4a5568;\n    font-size: 0.9rem;\n`;\n\nexport const LoginInput = styled.input`\n    padding: 0.75rem;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.2s;\n\n    &:focus {\n        outline: none;\n        border-color: #4299e1;\n    }\n`;\n\nexport const SubmitButton = styled.button`\n    background: #4299e1;\n    color: white;\n    padding: 1rem;\n    border: none;\n    border-radius: 8px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    cursor: pointer;\n    transition: transform 0.2s, background-color 0.2s;\n\n    &:hover {\n        background: #3182ce;\n        transform: translateY(-2px);\n    }\n\n    &:active {\n        transform: translateY(0);\n    }\n`;\n\nexport const GameRules = styled.div`\n    margin-top: 2rem;\n    padding-top: 1.5rem;\n    border-top: 1px solid #e2e8f0;\n`;\n\nexport const RulesTitle = styled.h3`\n    color: #2d3748;\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n`;\n\nexport const RulesList = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nexport const Rule = styled.p`\n    color: #4a5568;\n    font-size: 0.9rem;\n`;\n\n// Online Players Number Display\n\nexport const OnlinePlayersBox = styled.div`\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    background: rgba(255, 255, 255, 0.9);\n    padding: 10px 20px;\n    border-radius: 20px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const OnlineDot = styled.div`\n    width: 8px;\n    height: 8px;\n    background: #4ade80;\n    border-radius: 50%;\n    animation: pulse 1.5s infinite;\n\n    @keyframes pulse {\n        0% { opacity: 1; }\n        50% { opacity: 0.5; }\n        100% { opacity: 1; }\n    }\n`;\n\nexport const OnlineCount = styled.span`\n    color: #1f2937;\n    font-weight: 500;\n`;\n\n//\n\n\n\n\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n`;\n\nexport const Header = styled.header`\n  text-align: center;\n  padding: 10px;\n  margin-bottom: 20px;\n  border-bottom: 1px solid #d3d6da;\n`;\n\nexport const Title = styled.h1`\n  font-size: 32px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n  color: #1a1a1b;\n`;\n\nexport const GameBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const FormulaDisplay = styled.div`\n  width: 100%;\n  padding: 15px;\n  margin: 20px 0;\n  border: 2px solid #d3d6da;\n  border-radius: 4px;\n  font-size: 20px;\n  text-align: center;\n  background: #f6f7f8;\n`;\n\nexport const ResultDisplay = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  color: #1a1a1b;\n  text-align: center;\n`;\n\n\n\nexport const Input = styled.input`\n  padding: 10px;\n  width: 200px;\n  border: 2px solid #d3d6da;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\n\nexport const WinnerDisplay = styled.div`\n  background: #6aaa64;\n  color: white;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  margin: 20px 0;\n  animation: fadeIn 0.5s ease-in;\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n`;\n\nexport const WinnerFormula = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  margin: 10px 0;\n`;\n\nexport const PlayerName = styled.div`\n  font-size: 18px;\n  color: #1a1a1b;\n  margin-bottom: 10px;\n`;\n\nexport const GameControls = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #d3d6da;\n`;\n\nexport const GameAreaSingle = styled.div`\n  display: flex;\n  Justrify-content: center;\n  align-items: center;\n  padding: 2rem;\n  width: 100%;\n`;\n\nexport const GameAreaMulti = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;  \n  gap: 20px;\n  margin-top: 20px;\n`;\n\nexport const CurrentPlayerAreaSingle = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1.5rem;\n  max-width: 600px;\n  width: 100%;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const CurrentPlayerAreaMulti = styled.div`\n  padding: 20px;\n  border-right: 2px solid #d3d6da;\n`;\n\nexport const OtherPlayersArea = styled.div`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const PlayerCard = styled.div`\n  padding: 15px;\n  border: 1px solid #d3d6da;\n  border-radius: 8px;\n  background: #f8f9fa;\n`;\n\nexport const PlayerHeader = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  color: #1a1a1b;\n  margin-bottom: 10px;\n`;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {\n    LoginContainer,\n    Rule,\n    Card,\n    GameTitle,\n    LoginForm,\n    WelcomeText,\n    Label,\n    GameRules,\n    SubmitButton,\n    RulesList,\n    InputGroup,\n    RulesTitle,\n    Input,\n    SubTitle,\n    OnlinePlayersBox,\n    OnlineDot,\n    OnlineCount\n} from '../components/GameStyles';\nimport { useOnlinePlayerCount} from '../hooks/useOnlinePlayerCount';\n\n\nconst LoginPage = () => {\n    const { setGameClient } = useContext(GameClientContext);\n    const navigate = useNavigate();\n    const [playerName, setPlayerName] = useState('');\n    const  onlinePlayers  = useOnlinePlayerCount();\n\n\n\n    const handleLogin = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (!playerName.trim()) {\n            alert(\"Player name cannot be empty\");\n            return \n        }\n            \n        const client = new GameClient(playerName);\n        try{\n            await client.verifyPlayerName();\n            setGameClient(client);\n            console.log(\"LoginPage Player: \", client.getPlayerName());\n\n            navigate('/mode-selection');\n        } catch (error) {\n            if (error instanceof Error) {\n                alert(error.message);\n            } else {\n                console.error('Unexpected error:', error);\n                alert(\"Unexpected error\");\n            }\n        }\n        \n    };\n\n    return (\n        <LoginContainer>\n            <OnlinePlayersBox>\n                <OnlineDot />\n                <OnlineCount>Online: {onlinePlayers}</OnlineCount>\n            </OnlinePlayersBox>\n            <GameTitle>24!</GameTitle>\n            <SubTitle>Combine Numbers and Operators Strategically to Hit 24!</SubTitle>\n            \n            <Card>\n                <WelcomeText>Welcome to the Game</WelcomeText>\n                <LoginForm onSubmit={handleLogin}>\n                    <InputGroup>\n                        <Label>Enter Your Name</Label>\n                        <Input\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            placeholder=\"Your game name\"\n                            required\n                        />\n                    </InputGroup>\n                    <SubmitButton type=\"submit\">\n                        Start Playing!\n                    </SubmitButton>\n                </LoginForm>\n                \n                <GameRules>\n                    <RulesTitle>How to Play:</RulesTitle>\n                    <RulesList>\n                        <Rule>• Use all four numbers exactly once</Rule>\n                        <Rule>• Use basic operations (+, -, ×, ÷)</Rule>\n                        <Rule>• Make the result equal to 24</Rule>\n                    </RulesList>\n                </GameRules>\n            </Card>\n        </LoginContainer>\n    );\n};\n\nexport default LoginPage;","import React, { useState, useEffect } from 'react';\nimport { Input } from '../components/GameStyles';\n\nconst BASE_URL = 'http://localhost:8080/game'; \n\nexport const useOnlinePlayerCount = () => {\n    const [onlinePlayers, setOnlinePlayers] = useState<number>(0);\n    \n    useEffect(() => {\n        const fetchCount = async () => {\n            try {\n                const response = await fetch(`${BASE_URL}/players/count`);\n    \n                if (!response.ok) {\n                    console.error('Server response:', response.status, response.statusText);\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const count = await response.json();\n                setOnlinePlayers(count);                \n            } catch (error) {\n                console.error('Error fetching online player number:', error);\n                throw error;\n            }\n        }\n\n        fetchCount();\n        console.log(\"useOnlinePlayerCount: Fetching online player count\");\n        const interval = setInterval(fetchCount, 100);\n        return () => clearInterval(interval);\n\n    }, []);\n\n    return onlinePlayers;\n};\n\n","import React from 'react';\nimport { useContext } from 'react';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport GameClient from '../services/GameClient';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  padding: 20px;\n`;\n\nconst Title = styled.h2`\n  font-size: 32px;\n  color: #1a1a1b;\n  margin-bottom: 30px;\n`;\n\nconst ModeButton = styled.button`\n  width: 200px;\n  padding: 20px;\n  margin: 10px;\n  font-size: 18px;\n  font-weight: bold;\n  background: white;\n  border: 2px solid #d3d6da;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #f4f4f4;\n    transform: translateY(-2px);\n  }\n`;\n\nconst ModeDescription = styled.p`\n  font-size: 14px;\n  color: #666;\n  margin-top: 5px;\n`;\n\n\nconst ModeSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(\"Location state: \", location.state);\n  \n  const { client } = useContext(GameClientContext);\n\n\n  const handleSingleMode = async() => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    if (!client) {\n      return;\n    }\n    const roomID = await client.createRoom('1');\n    await client.joinGame(roomID);\n    navigate('/game/single', {\n       state: { \n        mode: 'single' } });\n  };\n\n  const handleMultiMode = (isSinglePlayer: boolean) => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    navigate('/rooms', {\n       state: { \n        mode: 'single' } });\n  };\n\n  return (\n    <Container>\n      <Title>Select Game Mode</Title>\n      <div>\n        <ModeButton onClick={() => handleSingleMode()}>\n          Single Player\n          <ModeDescription>Practice by yourself</ModeDescription>\n        </ModeButton>\n        \n        <ModeButton onClick={() => handleMultiMode(false)}>\n          Multiplayer\n          <ModeDescription>Compete with other players</ModeDescription>\n        </ModeButton>\n      </div>\n    </Container>\n  );\n};\n\nexport default ModeSelection;","\nimport styled from 'styled-components';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {Rooms, RoomInfo} from '../GameDefinitions';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst RoomList = styled.div`\n  width: 100%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nconst RoomCard = styled.div`\n  padding: 15px;\n  border: 1px solid #d3d6da;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  \n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  \n  &:hover {\n    background: #5c935c;\n  }\n`;\n\nconst RoomSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const [rooms, setRooms] = useState<RoomInfo[]>([]);\n  const { client } = useContext(GameClientContext);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (client) {\n      interval = setInterval(async () => {\n        const response = await client.fetchRooms();\n        if (response.status === 'Empty') {\n          setRooms([]);\n          return;\n        } else {\n          console.log(\"RoomList: \", response.status);\n          console.log(\"RoomListLength: \", response.roomList.length);\n          setRooms(response.roomList);}\n      }, 1000);}\n\n      return () => clearInterval(interval);\n    \n  }, [client]);\n\n  const handleRoomClick = async (roomID: string) => {\n    if (!client) return;\n    try {\n      const response = await client.joinGame(roomID);\n      navigate(`/game/multi/${roomID}`);\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n\n  const createRoom = async (maxPlayer: string) => {\n    if (!client) return;\n    try {\n      const roomIDResponse = await client.createRoom(maxPlayer);\n      await client.joinGame(roomIDResponse);\n      navigate('/game/single', {\n        state: { \n         mode: 'single' } });\n\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  const renderRooms = () => {\n    if (rooms.length === 0) {\n      return <p>No rooms available</p>;\n    }\n    return rooms.map((room: RoomInfo) => (\n      <RoomCard key={room.roomID}>\n        <div>\n          <h3>Room {room.roomID}</h3>\n          <p>Host: {room.hostPlayer}</p>\n          <p>Available Seats: {room.vacancySeats}</p>\n        </div>\n        <Button onClick={() => handleRoomClick(room.roomID)}>\n          Join Room\n        </Button>\n      </RoomCard>\n    ));\n  };\n\n\n  return (\n    <Container>\n      <h1>Game Rooms</h1>\n      <Button onClick={() => createRoom(\"4\")}>Create New Room</Button>\n      \n      <RoomList>\n        {renderRooms()}\n      </RoomList>\n    </Container>\n  );\n};\n\nexport default RoomSelection;","import styled from 'styled-components';\n\n// Game number buttons\nexport const NumberButton = styled.button`\n  width: 60px;\n  height: 60px;\n  border: 2px solid #d3d6da;\n  border-radius: 4px;\n  font-size: 24px;\n  font-weight: bold;\n  background: white;\n  color: #1a1a1b;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\n// Operator buttons (+, -, *, /, (, ))\nexport const OperatorButton = styled.button`\n  width: 45px;\n  height: 45px;\n  border: none;\n  border-radius: 4px;\n  font-size: 20px;\n  font-weight: bold;\n  background: #818384;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #6e6e6e;\n  }\n`;\n\n// Control buttons (Clear, Undo, New Game, Quit)\nexport const ControlButton = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  margin: 0 5px;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #5c935c;\n  }\n`;\n\n// Button container layouts\nexport const NumbersGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const OperatorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 8px;\n`;\n\nexport const QuitButton = styled(ControlButton)`\n  background: #dc3545;\n  position: absolute;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 14px;\n  padding: 8px 16px;\n\n  &:hover {\n    background: #c82333;\n  }\n`;\n\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  gap: 8px;\n  margin: 15px 0;\n  justify-content: center;\n\n  ${ControlButton} {\n    flex: 1;\n    max-width: 120px;  // Prevent buttons from getting too wide\n  }\n`;\n\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaSingle,\n    CurrentPlayerAreaSingle,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageSingle: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const [isCountingDown, setIsCountingDown] = useState(false);\n    const [count, setCount] = useState(3);\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (isCountingDown && count > 1) {\n            timer = setTimeout(() => setCount(prev => prev - 1), 1000);\n        } else if (count === 1) {\n            timer = setTimeout(() => {\n                setIsCountingDown(false);\n                setCount(3); // Reset for next game\n            }, 1000);\n        }\n        return () => clearTimeout(timer);\n    }, [count, isCountingDown]);\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.leaveGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            setIsCountingDown(true);\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaSingle>\n                        <CurrentPlayerAreaSingle>\n                            <NumbersGrid>\n                                {isCountingDown ? (\n                                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                                    <div className=\"text-4xl font-bold\">{count}</div>\n                                    </div>\n                                ) : (\n                                    gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                    key={index} \n                                    onClick={() => handleTokenClick(num)}\n                                    >\n                                    {num}\n                                    </NumberButton>\n                                ))\n                                )}\n       \n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaSingle>\n                    </GameAreaSingle>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageSingle;","import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaMulti,\n    CurrentPlayerAreaMulti,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageMulti: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.leaveGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaMulti>\n                        <CurrentPlayerAreaMulti>\n                            <NumbersGrid>\n                                {gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                        key={index} \n                                        onClick={() => handleTokenClick(num)}\n                                    >\n                                        {num}\n                                    </NumberButton>\n                                ))}\n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaMulti>\n\n                        <OtherPlayersArea>\n                            {client && Object.entries(client['_cells'])\n                                .filter(([name]) => name !== playerName)\n                                .map(([name, cell]) => (\n                                    <PlayerCard key={name}>\n                                        <PlayerHeader>{name}</PlayerHeader>\n                                        <FormulaDisplay>{cell.formula || 'No formula yet'}</FormulaDisplay>\n                                        <ResultDisplay>Result: {cell.value || '0'}</ResultDisplay>\n                                    </PlayerCard>\n                                ))}\n                        </OtherPlayersArea>\n                    </GameAreaMulti>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageMulti;","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';  \nimport ModeSelection from './pages/ModeSelection';\nimport RoomSelection from './pages/RoomSelection';\nimport GamePageSingle from './pages/GamePageSingle'; \nimport GamePageMulti from './pages/GamePageMulti'; \nimport { GameClientProvider } from './contexts/GameClientContext';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n     <GameClientProvider>\n      <Routes>\n        <Route path=\"/\" element={<LoginPage />} />\n        <Route path=\"/mode-selection\" element={<ModeSelection />} />\n        <Route path=\"/rooms\" element={<RoomSelection />} />\n        <Route path=\"/game/single\" element={<GamePageSingle />} />\n        <Route path=\"/game/multi/:roomId\" element={<GamePageMulti />} />\n      </Routes>\n      </GameClientProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}