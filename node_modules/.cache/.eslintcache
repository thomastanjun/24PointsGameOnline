[{"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/index.tsx":"1","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/reportWebVitals.ts":"2","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/App.tsx":"3","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/components/GameButtons.tsx":"4","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/components/GameStyles.tsx":"5","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/ModeSelection.tsx":"6","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/LoginPage.tsx":"7","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/RoomSelection.tsx":"8","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/contexts/GameClientContext.tsx":"9","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/services/GameClient.ts":"10","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/GamePageSingle.tsx":"11","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/GamePageMulti.tsx":"12","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/hooks/useOnlinePlayerCount.ts":"13","/Users/tanjun/Documents/24PointsGameOnline/src/index.tsx":"14","/Users/tanjun/Documents/24PointsGameOnline/src/reportWebVitals.ts":"15","/Users/tanjun/Documents/24PointsGameOnline/src/App.tsx":"16","/Users/tanjun/Documents/24PointsGameOnline/src/pages/RoomSelection.tsx":"17","/Users/tanjun/Documents/24PointsGameOnline/src/pages/GamePageMulti.tsx":"18","/Users/tanjun/Documents/24PointsGameOnline/src/pages/LoginPage.tsx":"19","/Users/tanjun/Documents/24PointsGameOnline/src/pages/GamePageSingle.tsx":"20","/Users/tanjun/Documents/24PointsGameOnline/src/pages/ModeSelection.tsx":"21","/Users/tanjun/Documents/24PointsGameOnline/src/contexts/GameClientContext.tsx":"22","/Users/tanjun/Documents/24PointsGameOnline/src/hooks/useOnlinePlayerCount.ts":"23","/Users/tanjun/Documents/24PointsGameOnline/src/services/GameClient.ts":"24","/Users/tanjun/Documents/24PointsGameOnline/src/components/GameStyles.tsx":"25","/Users/tanjun/Documents/24PointsGameOnline/src/components/GameButtons.tsx":"26","/Users/tanjun/Documents/24PointsGameOnline/src/hooks/useGameExit.ts":"27"},{"size":554,"mtime":1731372809315,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1731372809315,"results":"30","hashOfConfig":"29"},{"size":915,"mtime":1732608347095,"results":"31","hashOfConfig":"29"},{"size":1751,"mtime":1731610773041,"results":"32","hashOfConfig":"29"},{"size":5697,"mtime":1736750690254,"results":"33","hashOfConfig":"29"},{"size":2175,"mtime":1732608311415,"results":"34","hashOfConfig":"29"},{"size":3091,"mtime":1736750602264,"results":"35","hashOfConfig":"29"},{"size":3047,"mtime":1732564361663,"results":"36","hashOfConfig":"29"},{"size":744,"mtime":1731983162358,"results":"37","hashOfConfig":"29"},{"size":7928,"mtime":1732608895571,"results":"38","hashOfConfig":"29"},{"size":7333,"mtime":1733441520011,"results":"39","hashOfConfig":"29"},{"size":7095,"mtime":1733441520011,"results":"40","hashOfConfig":"29"},{"size":1117,"mtime":1736800558414,"results":"41","hashOfConfig":"29"},{"size":554,"mtime":1739427696555,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1739427696555,"results":"44","hashOfConfig":"43"},{"size":915,"mtime":1740123166945,"results":"45","hashOfConfig":"43"},{"size":3051,"mtime":1740207999691,"results":"46","hashOfConfig":"43"},{"size":7172,"mtime":1740124156737,"results":"47","hashOfConfig":"43"},{"size":3094,"mtime":1740207365410,"results":"48","hashOfConfig":"43"},{"size":7409,"mtime":1740122669117,"results":"49","hashOfConfig":"43"},{"size":2175,"mtime":1739427696555,"results":"50","hashOfConfig":"43"},{"size":744,"mtime":1739427696555,"results":"51","hashOfConfig":"43"},{"size":1196,"mtime":1740118677558,"results":"52","hashOfConfig":"43"},{"size":8837,"mtime":1740208214399,"results":"53","hashOfConfig":"43"},{"size":5697,"mtime":1739427696554,"results":"54","hashOfConfig":"43"},{"size":1751,"mtime":1739427696554,"results":"55","hashOfConfig":"43"},{"size":512,"mtime":1740168124190,"results":"56","hashOfConfig":"43"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1xuwyhd",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"h3f0c8",{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"91"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"91"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/index.tsx",[],["124","125"],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/reportWebVitals.ts",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/App.tsx",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/components/GameButtons.tsx",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/components/GameStyles.tsx",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/ModeSelection.tsx",["126"],"import React from 'react';\nimport { useContext } from 'react';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport GameClient from '../services/GameClient';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  padding: 20px;\n`;\n\nconst Title = styled.h2`\n  font-size: 32px;\n  color: #1a1a1b;\n  margin-bottom: 30px;\n`;\n\nconst ModeButton = styled.button`\n  width: 200px;\n  padding: 20px;\n  margin: 10px;\n  font-size: 18px;\n  font-weight: bold;\n  background: white;\n  border: 2px solid #d3d6da;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #f4f4f4;\n    transform: translateY(-2px);\n  }\n`;\n\nconst ModeDescription = styled.p`\n  font-size: 14px;\n  color: #666;\n  margin-top: 5px;\n`;\n\n\nconst ModeSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(\"Location state: \", location.state);\n  \n  const { client } = useContext(GameClientContext);\n\n\n  const handleSingleMode = async() => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    if (!client) {\n      return;\n    }\n    const roomID = await client.createRoom('1');\n    await client.joinGame(roomID);\n    navigate('/game/single', {\n       state: { \n        mode: 'single' } });\n  };\n\n  const handleMultiMode = (isSinglePlayer: boolean) => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    navigate('/rooms', {\n       state: { \n        mode: 'single' } });\n  };\n\n  return (\n    <Container>\n      <Title>Select Game Mode</Title>\n      <div>\n        <ModeButton onClick={() => handleSingleMode()}>\n          Single Player\n          <ModeDescription>Practice by yourself</ModeDescription>\n        </ModeButton>\n        \n        <ModeButton onClick={() => handleMultiMode(false)}>\n          Multiplayer\n          <ModeDescription>Compete with other players</ModeDescription>\n        </ModeButton>\n      </div>\n    </Container>\n  );\n};\n\nexport default ModeSelection;","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/LoginPage.tsx",["127"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {\n    LoginContainer,\n    Rule,\n    Card,\n    GameTitle,\n    LoginForm,\n    WelcomeText,\n    Label,\n    GameRules,\n    SubmitButton,\n    RulesList,\n    InputGroup,\n    RulesTitle,\n    Input,\n    SubTitle,\n    OnlinePlayersBox,\n    OnlineDot,\n    OnlineCount\n} from '../components/GameStyles';\nimport { useOnlinePlayerCount} from '../hooks/useOnlinePlayerCount';\n\n\nconst LoginPage = () => {\n    const { setGameClient } = useContext(GameClientContext);\n    const navigate = useNavigate();\n    const [playerName, setPlayerName] = useState('');\n    const  onlinePlayers  = useOnlinePlayerCount();\n\n\n\n    const handleLogin = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (!playerName.trim()) {\n            alert(\"Player name cannot be empty\");\n            return \n        }\n            \n        const client = new GameClient(playerName);\n        try{\n            await client.verifyPlayerName();\n            setGameClient(client);\n            console.log(\"LoginPage Player: \", client.getPlayerName());\n\n            navigate('/mode-selection');\n        } catch (error) {\n            if (error instanceof Error) {\n                alert(error.message);\n            } else {\n                console.error('Unexpected error:', error);\n                alert(\"Unexpected error\");\n            }\n        }\n        \n    };\n\n    return (\n        <LoginContainer>\n            <OnlinePlayersBox>\n                <OnlineDot />\n                <OnlineCount>Online: {onlinePlayers}</OnlineCount>\n            </OnlinePlayersBox>\n            <GameTitle>24!</GameTitle>\n            <SubTitle>Combine Numbers and Operators Strategically to Hit 24!</SubTitle>\n            \n            <Card>\n                <WelcomeText>Welcome to the Game</WelcomeText>\n                <LoginForm onSubmit={handleLogin}>\n                    <InputGroup>\n                        <Label>Enter Your Name</Label>\n                        <Input\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            placeholder=\"Your game name\"\n                            required\n                        />\n                    </InputGroup>\n                    <SubmitButton type=\"submit\">\n                        Start Playing!\n                    </SubmitButton>\n                </LoginForm>\n                \n                <GameRules>\n                    <RulesTitle>How to Play:</RulesTitle>\n                    <RulesList>\n                        <Rule>• Use all four numbers exactly once</Rule>\n                        <Rule>• Use basic operations (+, -, ×, ÷)</Rule>\n                        <Rule>• Make the result equal to 24</Rule>\n                    </RulesList>\n                </GameRules>\n            </Card>\n        </LoginContainer>\n    );\n};\n\nexport default LoginPage;","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/RoomSelection.tsx",["128","129","130","131"],"\nimport styled from 'styled-components';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {Rooms, RoomInfo} from '../GameDefinitions';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst RoomList = styled.div`\n  width: 100%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nconst RoomCard = styled.div`\n  padding: 15px;\n  border: 1px solid #d3d6da;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  \n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  \n  &:hover {\n    background: #5c935c;\n  }\n`;\n\nconst RoomSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const [rooms, setRooms] = useState<RoomInfo[]>([]);\n  const { client } = useContext(GameClientContext);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (client) {\n      interval = setInterval(async () => {\n        const response = await client.fetchRooms();\n        if (response.status === 'Empty') {\n          setRooms([]);\n          return;\n        } else {\n          console.log(\"RoomList: \", response.status);\n          console.log(\"RoomListLength: \", response.roomList.length);\n          setRooms(response.roomList);}\n      }, 1000);}\n\n      return () => clearInterval(interval);\n    \n  }, [client]);\n\n  const handleRoomClick = async (roomID: string) => {\n    if (!client) return;\n    try {\n      const response = await client.joinGame(roomID);\n      navigate(`/game/multi/${roomID}`);\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n\n  const createRoom = async (maxPlayer: string) => {\n    if (!client) return;\n    try {\n      const roomIDResponse = await client.createRoom(maxPlayer);\n      await client.joinGame(roomIDResponse);\n      navigate('/game/single', {\n        state: { \n         mode: 'single' } });\n\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  const renderRooms = () => {\n    if (rooms.length === 0) {\n      return <p>No rooms available</p>;\n    }\n    return rooms.map((room: RoomInfo) => (\n      <RoomCard key={room.roomID}>\n        <div>\n          <h3>Room {room.roomID}</h3>\n          <p>Host: {room.hostPlayer}</p>\n          <p>Available Seats: {room.vacancySeats}</p>\n        </div>\n        <Button onClick={() => handleRoomClick(room.roomID)}>\n          Join Room\n        </Button>\n      </RoomCard>\n    ));\n  };\n\n\n  return (\n    <Container>\n      <h1>Game Rooms</h1>\n      <Button onClick={() => createRoom(\"4\")}>Create New Room</Button>\n      \n      <RoomList>\n        {renderRooms()}\n      </RoomList>\n    </Container>\n  );\n};\n\nexport default RoomSelection;","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/contexts/GameClientContext.tsx",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/services/GameClient.ts",[],"/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/GamePageSingle.tsx",["132","133","134","135","136","137","138","139"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaSingle,\n    CurrentPlayerAreaSingle,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageSingle: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const [isCountingDown, setIsCountingDown] = useState(false);\n    const [count, setCount] = useState(3);\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (isCountingDown && count > 1) {\n            timer = setTimeout(() => setCount(prev => prev - 1), 1000);\n        } else if (count === 1) {\n            timer = setTimeout(() => {\n                setIsCountingDown(false);\n                setCount(3); // Reset for next game\n            }, 1000);\n        }\n        return () => clearTimeout(timer);\n    }, [count, isCountingDown]);\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.leaveGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            setIsCountingDown(true);\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaSingle>\n                        <CurrentPlayerAreaSingle>\n                            <NumbersGrid>\n                                {isCountingDown ? (\n                                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                                    <div className=\"text-4xl font-bold\">{count}</div>\n                                    </div>\n                                ) : (\n                                    gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                    key={index} \n                                    onClick={() => handleTokenClick(num)}\n                                    >\n                                    {num}\n                                    </NumberButton>\n                                ))\n                                )}\n       \n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaSingle>\n                    </GameAreaSingle>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageSingle;","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/pages/GamePageMulti.tsx",["140","141","142","143","144","145"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaMulti,\n    CurrentPlayerAreaMulti,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageMulti: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.leaveGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaMulti>\n                        <CurrentPlayerAreaMulti>\n                            <NumbersGrid>\n                                {gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                        key={index} \n                                        onClick={() => handleTokenClick(num)}\n                                    >\n                                        {num}\n                                    </NumberButton>\n                                ))}\n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaMulti>\n\n                        <OtherPlayersArea>\n                            {client && Object.entries(client['_cells'])\n                                .filter(([name]) => name !== playerName)\n                                .map(([name, cell]) => (\n                                    <PlayerCard key={name}>\n                                        <PlayerHeader>{name}</PlayerHeader>\n                                        <FormulaDisplay>{cell.formula || 'No formula yet'}</FormulaDisplay>\n                                        <ResultDisplay>Result: {cell.value || '0'}</ResultDisplay>\n                                    </PlayerCard>\n                                ))}\n                        </OtherPlayersArea>\n                    </GameAreaMulti>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageMulti;","/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/hooks/useOnlinePlayerCount.ts",["146"],"/Users/tanjun/Documents/24PointsGameOnline/src/index.tsx",[],["147","148"],"/Users/tanjun/Documents/24PointsGameOnline/src/reportWebVitals.ts",[],"/Users/tanjun/Documents/24PointsGameOnline/src/App.tsx",[],"/Users/tanjun/Documents/24PointsGameOnline/src/pages/RoomSelection.tsx",["149","150","151","152"],"\nimport styled from 'styled-components';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {Rooms, RoomInfo} from '../GameDefinitions';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst RoomList = styled.div`\n  width: 100%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nconst RoomCard = styled.div`\n  padding: 15px;\n  border: 1px solid #d3d6da;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  \n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  \n  &:hover {\n    background: #5c935c;\n  }\n`;\n\nconst RoomSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const [rooms, setRooms] = useState<RoomInfo[]>([]);\n  const { client } = useContext(GameClientContext);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (client) {\n      interval = setInterval(async () => {\n        const response = await client.fetchRooms();\n        if (response.status === 'Empty') {\n          setRooms([]);\n          return;\n        } else {\n          console.log(\"RoomList: \", response.status);\n          console.log(\"RoomListLength: \", response.roomList.length);\n          setRooms(response.roomList);}\n      }, 1000);}\n\n      return () => clearInterval(interval);\n    \n  }, [client]);\n\n  const handleRoomClick = async (roomID: string) => {\n    if (!client) return;\n    try {\n      const response = await client.joinGame(roomID);\n      navigate(`/game/multi/${roomID}`);\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n\n  const createRoom = async (maxPlayer: string) => {\n    if (!client) return;\n    try {\n      const roomIDResponse = await client.createRoom(maxPlayer);\n      await client.joinGame(roomIDResponse);\n      navigate('/game/single', {\n        state: { \n         mode: 'single' } });\n\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  const renderRooms = () => {\n    if (rooms.length === 0) {\n      return <p>No rooms available</p>;\n    }\n    return rooms.map((room: RoomInfo) => (\n      <RoomCard key={room.roomID}>\n        <div>\n          <h3>Room {room.roomID}</h3>\n          <p>Host: {room.hostPlayer}</p>\n          <p>Available Seats: {room.vacancySeats}</p>\n        </div>\n        <Button onClick={() => handleRoomClick(room.roomID)}>\n          Join Room\n        </Button>\n      </RoomCard>\n    ));\n  };\n\n  \n\n\n  return (\n    <Container>\n      <h1>Game Rooms</h1>\n      <Button onClick={() => createRoom(\"4\")}>Create New Room</Button>\n      \n      <RoomList>\n        {renderRooms()}\n      </RoomList>\n    </Container>\n  );\n};\n\nexport default RoomSelection;","/Users/tanjun/Documents/24PointsGameOnline/src/pages/GamePageMulti.tsx",["153","154","155","156","157","158"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport { useGameExit } from '../hooks/useGameExit';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaMulti,\n    CurrentPlayerAreaMulti,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageMulti: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.exitGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    useGameExit(client);\n\n\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaMulti>\n                        <CurrentPlayerAreaMulti>\n                            <NumbersGrid>\n                                {gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                        key={index} \n                                        onClick={() => handleTokenClick(num)}\n                                    >\n                                        {num}\n                                    </NumberButton>\n                                ))}\n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaMulti>\n\n                        <OtherPlayersArea>\n                            {client && Object.entries(client['_cells'])\n                                .filter(([name]) => name !== playerName)\n                                .map(([name, cell]) => (\n                                    <PlayerCard key={name}>\n                                        <PlayerHeader>{name}</PlayerHeader>\n                                        <FormulaDisplay>{cell.formula || 'No formula yet'}</FormulaDisplay>\n                                        <ResultDisplay>Result: {cell.value || '0'}</ResultDisplay>\n                                    </PlayerCard>\n                                ))}\n                        </OtherPlayersArea>\n                    </GameAreaMulti>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageMulti;","/Users/tanjun/Documents/24PointsGameOnline/src/pages/LoginPage.tsx",["159"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {\n    LoginContainer,\n    Rule,\n    Card,\n    GameTitle,\n    LoginForm,\n    WelcomeText,\n    Label,\n    GameRules,\n    SubmitButton,\n    RulesList,\n    InputGroup,\n    RulesTitle,\n    Input,\n    SubTitle,\n    OnlinePlayersBox,\n    OnlineDot,\n    OnlineCount\n} from '../components/GameStyles';\nimport { useOnlinePlayerCount} from '../hooks/useOnlinePlayerCount';\n\n\nconst LoginPage = () => {\n    const { setGameClient } = useContext(GameClientContext);\n    const navigate = useNavigate();\n    const [playerName, setPlayerName] = useState('');\n    const  onlinePlayers  = useOnlinePlayerCount();\n\n\n\n    const handleLogin = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (!playerName.trim()) {\n            alert(\"Player name cannot be empty\");\n            return \n        }\n            \n        const client = new GameClient(playerName);\n        try{\n            await client.addPlayer(playerName);\n            setGameClient(client);\n            console.log(\"LoginPage Player: \", client.getPlayerName());\n\n            navigate('/mode-selection');\n        } catch (error) {\n            if (error instanceof Error) {\n                alert(error.message);\n            } else {\n                console.error('Unexpected error:', error);\n                alert(\"Unexpected error\");\n            }\n        }\n        \n    };\n\n    return (\n        <LoginContainer>\n            <OnlinePlayersBox>\n                <OnlineDot />\n                <OnlineCount>Online: {onlinePlayers}</OnlineCount>\n            </OnlinePlayersBox>\n            <GameTitle>24!</GameTitle>\n            <SubTitle>Combine Numbers and Operators Strategically to Hit 24!</SubTitle>\n            \n            <Card>\n                <WelcomeText>Welcome to the Game</WelcomeText>\n                <LoginForm onSubmit={handleLogin}>\n                    <InputGroup>\n                        <Label>Enter Your Name</Label>\n                        <Input\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            placeholder=\"Your game name\"\n                            required\n                        />\n                    </InputGroup>\n                    <SubmitButton type=\"submit\">\n                        Start Playing!\n                    </SubmitButton>\n                </LoginForm>\n                \n                <GameRules>\n                    <RulesTitle>How to Play:</RulesTitle>\n                    <RulesList>\n                        <Rule>• Use all four numbers exactly once</Rule>\n                        <Rule>• Use basic operations (+, -, ×, ÷)</Rule>\n                        <Rule>• Make the result equal to 24</Rule>\n                    </RulesList>\n                </GameRules>\n            </Card>\n        </LoginContainer>\n    );\n};\n\nexport default LoginPage;","/Users/tanjun/Documents/24PointsGameOnline/src/pages/GamePageSingle.tsx",["160","161","162","163","164","165","166","167"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport { useGameExit } from '../hooks/useGameExit';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaSingle,\n    CurrentPlayerAreaSingle,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameControls\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageSingle: React.FC = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    console.log(\"a new render\");\n\n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0');\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []); \n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [status, setStatus] = useState<string>('false');\n\n    const [isCountingDown, setIsCountingDown] = useState(false);\n    const [count, setCount] = useState(3);\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setResult(client.getCurrentPlayerResult());\n        setGameNumbers(client.getGameNumbersString());\n        setStatus(client.getGameStatus());\n\n\n        if (client.getWinner()) {\n            setWinner(client.getWinner());\n            setWinnerFormula(client.getWinnerFormula());\n        }\n    };\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (isCountingDown && count > 1) {\n            timer = setTimeout(() => setCount(prev => prev - 1), 1000);\n        } else if (count === 1) {\n            timer = setTimeout(() => {\n                setIsCountingDown(false);\n                setCount(3); // Reset for next game\n            }, 1000);\n        }\n        return () => clearTimeout(timer);\n    }, [count, isCountingDown]);\n\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.exitGame();\n            resetGameState();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n    const resetGameState = () => {\n        setPlayerName('');\n        setFormula('');\n        setResult('0');\n        setGameNumbers([]);\n        setWinner('');\n        setWinnerFormula('');\n    };\n    \n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            setIsCountingDown(true);\n            await client.startNewGame();\n            setWinner('');\n            setWinnerFormula('');\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    \n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    useGameExit(client);\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>You Solved It!</h2>\n                            <div>Player: {winner}</div>\n                            <WinnerFormula>\n                                Winning Formula: {winnerFormula}\n                            </WinnerFormula>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaSingle>\n                        <CurrentPlayerAreaSingle>\n                            <NumbersGrid>\n                                {isCountingDown ? (\n                                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                                    <div className=\"text-4xl font-bold\">{count}</div>\n                                    </div>\n                                ) : (\n                                    gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                    key={index} \n                                    onClick={() => handleTokenClick(num)}\n                                    >\n                                    {num}\n                                    </NumberButton>\n                                ))\n                                )}\n       \n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaSingle>\n                    </GameAreaSingle>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageSingle;","/Users/tanjun/Documents/24PointsGameOnline/src/pages/ModeSelection.tsx",["168"],"/Users/tanjun/Documents/24PointsGameOnline/src/contexts/GameClientContext.tsx",[],"/Users/tanjun/Documents/24PointsGameOnline/src/hooks/useOnlinePlayerCount.ts",["169","170"],"import React, { useState, useEffect } from 'react';\nimport { Input } from '../components/GameStyles';\n\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nexport const useOnlinePlayerCount = () => {\n    const [onlinePlayers, setOnlinePlayers] = useState<number>(0);\n    \n    useEffect(() => {\n        const fetchCount = async () => {\n            try {\n                const response = await fetch(`${BASE_URL}/players/count`);\n    \n                if (!response.ok) {\n                    console.error('Server response:', response.status, response.statusText);\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const count = await response.json();\n                setOnlinePlayers(count);                \n            } catch (error) {\n                console.error('Error fetching online player number:', error);\n                throw error;\n            }\n        }\n\n        fetchCount();\n        console.log(\"useOnlinePlayerCount: Fetching online player count\");\n        const interval = setInterval(fetchCount, 100);\n        return () => clearInterval(interval);\n\n    }, []);\n\n    return onlinePlayers;\n};\n\n","/Users/tanjun/Documents/24PointsGameOnline/src/services/GameClient.ts",["171"],"/Users/tanjun/Documents/24PointsGameOnline/src/components/GameStyles.tsx",[],"/Users/tanjun/Documents/24PointsGameOnline/src/components/GameButtons.tsx",[],"/Users/tanjun/Documents/24PointsGameOnline/src/hooks/useGameExit.ts",["172","173"],"import React, { useState, useEffect } from 'react';\nimport  GameClient from '../services/GameClient';\n\nexport const useGameExit = (client: GameClient | null) => {\n\n    useEffect(() => {\n        const handleBeforeUnload =  (e: BeforeUnloadEvent) => {\n            if (client) {\n                client.exitGame();\n            }\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n\n    }, [client]);\n\n}",{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":18},{"ruleId":"178","severity":1,"message":"182","line":1,"column":27,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"183","line":4,"column":10,"nodeType":"180","messageId":"181","endLine":4,"endColumn":21},{"ruleId":"178","severity":1,"message":"179","line":5,"column":8,"nodeType":"180","messageId":"181","endLine":5,"endColumn":18},{"ruleId":"178","severity":1,"message":"184","line":7,"column":9,"nodeType":"180","messageId":"181","endLine":7,"endColumn":14},{"ruleId":"178","severity":1,"message":"185","line":77,"column":13,"nodeType":"180","messageId":"181","endLine":77,"endColumn":21},{"ruleId":"178","severity":1,"message":"183","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":21},{"ruleId":"178","severity":1,"message":"186","line":23,"column":5,"nodeType":"180","messageId":"181","endLine":23,"endColumn":21},{"ruleId":"178","severity":1,"message":"187","line":24,"column":5,"nodeType":"180","messageId":"181","endLine":24,"endColumn":15},{"ruleId":"178","severity":1,"message":"188","line":25,"column":5,"nodeType":"180","messageId":"181","endLine":25,"endColumn":17},{"ruleId":"178","severity":1,"message":"189","line":28,"column":5,"nodeType":"180","messageId":"181","endLine":28,"endColumn":10},{"ruleId":"178","severity":1,"message":"190","line":32,"column":5,"nodeType":"180","messageId":"181","endLine":32,"endColumn":17},{"ruleId":"178","severity":1,"message":"191","line":35,"column":10,"nodeType":"180","messageId":"181","endLine":35,"endColumn":18},{"ruleId":"178","severity":1,"message":"192","line":49,"column":12,"nodeType":"180","messageId":"181","endLine":49,"endColumn":18},{"ruleId":"178","severity":1,"message":"182","line":1,"column":27,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"183","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":21},{"ruleId":"178","severity":1,"message":"189","line":28,"column":5,"nodeType":"180","messageId":"181","endLine":28,"endColumn":10},{"ruleId":"178","severity":1,"message":"190","line":32,"column":5,"nodeType":"180","messageId":"181","endLine":32,"endColumn":17},{"ruleId":"178","severity":1,"message":"191","line":35,"column":10,"nodeType":"180","messageId":"181","endLine":35,"endColumn":18},{"ruleId":"178","severity":1,"message":"192","line":49,"column":12,"nodeType":"180","messageId":"181","endLine":49,"endColumn":18},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"174","replacedBy":"194"},{"ruleId":"176","replacedBy":"195"},{"ruleId":"178","severity":1,"message":"183","line":4,"column":10,"nodeType":"180","messageId":"181","endLine":4,"endColumn":21},{"ruleId":"178","severity":1,"message":"179","line":5,"column":8,"nodeType":"180","messageId":"181","endLine":5,"endColumn":18},{"ruleId":"178","severity":1,"message":"184","line":7,"column":9,"nodeType":"180","messageId":"181","endLine":7,"endColumn":14},{"ruleId":"178","severity":1,"message":"185","line":77,"column":13,"nodeType":"180","messageId":"181","endLine":77,"endColumn":21},{"ruleId":"178","severity":1,"message":"182","line":1,"column":27,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"183","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":21},{"ruleId":"178","severity":1,"message":"189","line":29,"column":5,"nodeType":"180","messageId":"181","endLine":29,"endColumn":10},{"ruleId":"178","severity":1,"message":"190","line":33,"column":5,"nodeType":"180","messageId":"181","endLine":33,"endColumn":17},{"ruleId":"178","severity":1,"message":"191","line":36,"column":10,"nodeType":"180","messageId":"181","endLine":36,"endColumn":18},{"ruleId":"178","severity":1,"message":"192","line":50,"column":12,"nodeType":"180","messageId":"181","endLine":50,"endColumn":18},{"ruleId":"178","severity":1,"message":"182","line":1,"column":27,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"183","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":21},{"ruleId":"178","severity":1,"message":"186","line":24,"column":5,"nodeType":"180","messageId":"181","endLine":24,"endColumn":21},{"ruleId":"178","severity":1,"message":"187","line":25,"column":5,"nodeType":"180","messageId":"181","endLine":25,"endColumn":15},{"ruleId":"178","severity":1,"message":"188","line":26,"column":5,"nodeType":"180","messageId":"181","endLine":26,"endColumn":17},{"ruleId":"178","severity":1,"message":"189","line":29,"column":5,"nodeType":"180","messageId":"181","endLine":29,"endColumn":10},{"ruleId":"178","severity":1,"message":"190","line":33,"column":5,"nodeType":"180","messageId":"181","endLine":33,"endColumn":17},{"ruleId":"178","severity":1,"message":"191","line":36,"column":10,"nodeType":"180","messageId":"181","endLine":36,"endColumn":18},{"ruleId":"178","severity":1,"message":"192","line":50,"column":12,"nodeType":"180","messageId":"181","endLine":50,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":18},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"189","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":15},{"ruleId":"196","severity":1,"message":"197","line":44,"column":42,"nodeType":"198","messageId":"199","endLine":44,"endColumn":74},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"200","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":25},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"@typescript-eslint/no-unused-vars","'GameClient' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useLocation' is defined but never used.","'Rooms' is defined but never used.","'response' is assigned a value but never used.","'OtherPlayersArea' is defined but never used.","'PlayerCard' is defined but never used.","'PlayerHeader' is defined but never used.","'Input' is defined but never used.","'GameControls' is defined but never used.","'RoomInfo' is defined but never used.","'status' is assigned a value but never used.","'React' is defined but never used.",["201"],["202"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]