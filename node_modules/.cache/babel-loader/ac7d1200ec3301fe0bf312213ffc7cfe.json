{"ast":null,"code":"export let GameMode = /*#__PURE__*/function (GameMode) {\n  GameMode[\"SINGLE\"] = \"SINGLE\";\n  GameMode[\"MULTI\"] = \"MULTI\";\n  return GameMode;\n}({});\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/game';\nclass GameClient {\n  constructor(playerName) {\n    this._baseURL = void 0;\n    this._playerName = void 0;\n    this._cells = void 0;\n    this._gameNumbers = void 0;\n    this._gameStatus = void 0;\n    this._roomID = void 0;\n    this._gameMode = void 0;\n    this._rooms = void 0;\n    this._baseURL = API_URL;\n    this._playerName = playerName;\n    this._cells = {};\n    this._gameNumbers = [];\n    this._gameStatus = {\n      gameStatus: 'false',\n      winner: '',\n      winnerFormula: ''\n    };\n    this._roomID = null;\n    this._gameMode = null;\n    console.log(\"GameClient initialized with player:\", playerName);\n    this._rooms = {};\n  }\n\n  // Core game operations\n  async getOnlinePlayerNumber() {\n    try {\n      const response = await fetch('${this._baseURL/players/count}');\n      if (!response.ok) {\n        console.error('Server response:', response.status, response.statusText);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error fetching online player number:', error);\n      throw error;\n    }\n  }\n  async verifyPlayerName() {\n    try {\n      const response = await fetch(`${this._baseURL}/player/${this._playerName}`);\n      if (!response.ok) {\n        if (response.status === 409) {\n          const errorData = await response.json();\n          throw new Error(errorData.message);\n        } else {\n          throw new Error('Unexpected error: ' + response.status);\n        }\n      }\n    } catch (error) {\n      console.error('Player Already logged in:', error);\n      throw error;\n    }\n  }\n  async createRoom(maxPlayers) {\n    try {\n      console.log(\"creating game\");\n      const response = await fetch(`${this._baseURL}/room/${maxPlayers}`, {\n        method: 'POST'\n      });\n      const roomID = await response.text();\n      this._roomID = roomID;\n      console.log(\"GameClient roomID\", roomID);\n      this._gameMode = GameMode.SINGLE;\n      return roomID;\n    } catch (error) {\n      console.error('Error creating room:', error);\n      throw error;\n    }\n  }\n  async fetchRooms() {\n    try {\n      const response = await fetch(`${this._baseURL}/rooms/available`);\n      if (!response.ok) {\n        console.error('Server response:', response.status, response.statusText);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching rooms:', error);\n      throw error;\n    }\n  }\n  async joinGame(roomID) {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${roomID}/add/player/${this._playerName}`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      this._roomID = roomID;\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error joining game:', error);\n      throw error;\n    }\n  }\n  exitGame() {\n    try {\n      fetch(`${this._baseURL}/room/${this._roomID}/remove/player/${this._playerName}`, {\n        method: 'DELETE',\n        keepalive: true\n      });\n      this._roomID = null;\n    } catch (error) {\n      console.error('Error during exit:', error);\n      throw error;\n    }\n  }\n  async addToken(token) {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${this._roomID}/add/token/${this._playerName}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: token\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error adding token:', error);\n      throw error;\n    }\n  }\n  async removeToken() {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${this._roomID}/remove/token/${this._playerName}`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n      console.log(\"reveived data after remove\", data);\n    } catch (error) {\n      console.error('Error removing token:', error);\n      throw error;\n    }\n  }\n  async clearFormula() {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${this._roomID}/clear/formula/${this._playerName}`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n      console.log(\"reveived data after clear\", data);\n    } catch (error) {\n      console.error('Error clearing formula:', error);\n      throw error;\n    }\n  }\n  async startNewGame() {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${this._roomID}/newgame/game1`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      throw error;\n    }\n  }\n  async fetchGamePage() {\n    try {\n      const response = await fetch(`${this._baseURL}/room/${this._roomID}/state`);\n      const data = await response.json();\n      console.log(\"fetch\", response);\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      throw error;\n    }\n  }\n  setRoomID(roomID) {\n    this._roomID = roomID;\n  }\n  getCurrentPlayerFormula() {\n    var _this$_cells$this$_pl;\n    return ((_this$_cells$this$_pl = this._cells[this._playerName]) === null || _this$_cells$this$_pl === void 0 ? void 0 : _this$_cells$this$_pl.formula) || '';\n  }\n  getCurrentPlayerResult() {\n    var _this$_cells$this$_pl2;\n    return ((_this$_cells$this$_pl2 = this._cells[this._playerName]) === null || _this$_cells$this$_pl2 === void 0 ? void 0 : _this$_cells$this$_pl2.value) || '0';\n  }\n  getCurrentPlayerError() {\n    var _this$_cells$this$_pl3;\n    return ((_this$_cells$this$_pl3 = this._cells[this._playerName]) === null || _this$_cells$this$_pl3 === void 0 ? void 0 : _this$_cells$this$_pl3.value) || '';\n  }\n  getGameNumbersString() {\n    return this._gameNumbers;\n  }\n  isGameFinished() {\n    return this._gameStatus.gameStatus === 'true';\n  }\n  getWinner() {\n    return this._gameStatus.winner;\n  }\n  getWinnerFormula() {\n    return this._gameStatus.winnerFormula;\n  }\n  getGameStatus() {\n    return this._gameStatus.gameStatus;\n  }\n  getPlayerName() {\n    return this._playerName;\n  }\n  _updateGameState(data) {\n    this._cells = data.players;\n    this._gameNumbers = data.gameNumbers;\n    this._gameStatus = data.gameStatus;\n  }\n  resetClient() {\n    this._cells = {};\n    this._gameNumbers = [];\n    this._gameStatus = {\n      gameStatus: 'false',\n      winner: '',\n      winnerFormula: ''\n    };\n    this._roomID = null;\n    this._gameMode = null;\n  }\n}\nexport default GameClient;","map":{"version":3,"names":["GameMode","API_URL","process","env","REACT_APP_API_URL","GameClient","constructor","playerName","_baseURL","_playerName","_cells","_gameNumbers","_gameStatus","_roomID","_gameMode","_rooms","gameStatus","winner","winnerFormula","console","log","getOnlinePlayerNumber","response","fetch","ok","error","status","statusText","Error","json","verifyPlayerName","errorData","message","createRoom","maxPlayers","method","roomID","text","SINGLE","fetchRooms","data","joinGame","_updateGameState","exitGame","keepalive","addToken","token","headers","body","removeToken","clearFormula","startNewGame","fetchGamePage","setRoomID","getCurrentPlayerFormula","_this$_cells$this$_pl","formula","getCurrentPlayerResult","_this$_cells$this$_pl2","value","getCurrentPlayerError","_this$_cells$this$_pl3","getGameNumbersString","isGameFinished","getWinner","getWinnerFormula","getGameStatus","getPlayerName","players","gameNumbers","resetClient"],"sources":["/Users/tanjun/Documents/24PointsGameOnline/src/services/GameClient.ts"],"sourcesContent":["import { PageInfo, CellInfo, GameStatusInfo } from '../GameDefinitions';\nimport { Rooms } from '../GameDefinitions';\n\ninterface ErrorResponse {\n    message: string;\n    code: string;\n    timestamp: number;\n}\n\nexport enum GameMode {\n    SINGLE = 'SINGLE',\n    MULTI = 'MULTI'\n}\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/game';\n\nclass GameClient {\n    private _baseURL: string;\n    private _playerName: string; \n    private _cells: {[playerName: string]: CellInfo};\n    private _gameNumbers: string[];\n    private _gameStatus: GameStatusInfo;\n    private _roomID: string | null;\n    private _gameMode: GameMode | null;\n\n    private _rooms: {[roomID: string]: string};\n\n    constructor(playerName: string) {\n        this._baseURL = API_URL;\n        this._playerName = playerName;\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n        console.log(\"GameClient initialized with player:\", playerName);\n\n        this._rooms = {};\n    }\n\n    // Core game operations\n    public async getOnlinePlayerNumber(): Promise<number> {\n        try {\n            const response = await fetch('${this._baseURL/players/count}');\n\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n            \n        } catch (error) {\n            console.error('Error fetching online player number:', error);\n            throw error;\n        }\n    }\n\n\n    public async verifyPlayerName(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/${this._playerName}`); \n\n            \n            if (!response.ok) {\n                if (response.status === 409) {\n                    const errorData: ErrorResponse = await response.json();\n                    throw new Error(errorData.message);\n                } else {\n                    throw new Error('Unexpected error: '+ response.status);\n                }\n            }\n        } catch (error) {\n            console.error('Player Already logged in:', error);\n            throw error;\n        }\n    }\n\n    public async createRoom(maxPlayers: string): Promise<string> {\n        try {\n            console.log(\"creating game\");\n            const response = await fetch(`${this._baseURL}/room/${maxPlayers}`, {\n                method: 'POST'\n            });\n            const roomID = await response.text();\n            this._roomID = roomID;\n            console.log(\"GameClient roomID\", roomID);\n\n            this._gameMode = GameMode.SINGLE ;\n            return roomID;\n        } catch (error) {\n            console.error('Error creating room:', error);\n            throw error;\n        }\n    }\n\n    public async fetchRooms(): Promise<Rooms> {\n        try {\n            const response = await fetch(`${this._baseURL}/rooms/available`);\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching rooms:', error);\n            throw error;\n        }\n    }\n\n    public async joinGame(roomID: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${roomID}/add/player/${this._playerName}`, {\n                method: 'PUT'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n            this._roomID = roomID;\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error joining game:', error);\n            throw error;\n        }\n    }\n\n    public exitGame(): void {\n        try {\n            fetch(`${this._baseURL}/room/${this._roomID}/remove/player/${this._playerName}`, {\n                method: 'DELETE',\n                keepalive: true\n            });\n\n            this._roomID = null;\n\n        } catch (error) {\n            console.error('Error during exit:', error);\n            throw error;\n        }\n    }\n\n    public async addToken(token: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/add/token/${this._playerName}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'text/plain'\n                },\n                body: token\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error adding token:', error);\n            throw error;\n        }\n    }\n\n    public async removeToken(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/remove/token/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after remove\", data);\n        } catch (error) {\n            console.error('Error removing token:', error);\n            throw error;\n        }\n    }\n\n    public async clearFormula(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/clear/formula/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after clear\", data);\n        } catch (error) {\n            console.error('Error clearing formula:', error);\n            throw error;\n        }\n    }\n\n    public async startNewGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/newgame/game1`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error starting new game:', error);\n            throw error;\n        }\n    }\n\n    public async fetchGamePage(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/state`);\n            \n            const data = await response.json();\n            console.log(\"fetch\", response);\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            throw error;\n        }\n    }\n\n    public setRoomID(roomID: string): void {\n        this._roomID = roomID;\n    }\n\n    public getCurrentPlayerFormula(): string {\n        return this._cells[this._playerName]?.formula || '';\n    }\n\n    public getCurrentPlayerResult(): string {\n        return this._cells[this._playerName]?.value || '0';\n    }\n\n    public getCurrentPlayerError(): string {\n        return this._cells[this._playerName]?.value || '';\n    }\n\n    public getGameNumbersString(): string[] {\n        return this._gameNumbers;\n    }\n\n    public isGameFinished(): boolean {\n        return this._gameStatus.gameStatus === 'true';\n    }\n\n    public getWinner(): string {\n        return this._gameStatus.winner;\n    }\n\n    public getWinnerFormula(): string {\n        return this._gameStatus.winnerFormula;\n    }\n\n    public getGameStatus(): string {\n        return this._gameStatus.gameStatus;\n    }\n\n    public getPlayerName(): string {\n        return this._playerName;\n    }\n\n    private _updateGameState(data: PageInfo): void {\n        this._cells = data.players;\n        this._gameNumbers = data.gameNumbers;\n        this._gameStatus = data.gameStatus;\n    }\n\n    public resetClient(): void {\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n    }\n\n}\n\nexport default GameClient;"],"mappings":"AASA,WAAYA,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAKpB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,4BAA4B;AAE7E,MAAMC,UAAU,CAAC;EAWbC,WAAWA,CAACC,UAAkB,EAAE;IAAA,KAVxBC,QAAQ;IAAA,KACRC,WAAW;IAAA,KACXC,MAAM;IAAA,KACNC,YAAY;IAAA,KACZC,WAAW;IAAA,KACXC,OAAO;IAAA,KACPC,SAAS;IAAA,KAETC,MAAM;IAGV,IAAI,CAACP,QAAQ,GAAGP,OAAO;IACvB,IAAI,CAACQ,WAAW,GAAGF,UAAU;IAC7B,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,WAAW,GAAG;MAAEI,UAAU,EAAE,OAAO;MAAEC,MAAM,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAG,CAAC;IACzE,IAAI,CAACL,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrBK,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEb,UAAU,CAAC;IAE9D,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC;EACpB;;EAEA;EACA,MAAaM,qBAAqBA,CAAA,EAAoB;IAClD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAE9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACdL,OAAO,CAACM,KAAK,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,MAAM,EAAEJ,QAAQ,CAACK,UAAU,CAAC;QACvE,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC7D;MACA,OAAOJ,QAAQ,CAACO,IAAI,CAAC,CAAC;IAE1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACf;EACJ;EAGA,MAAaK,gBAAgBA,CAAA,EAAkB;IAC3C,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,WAAW,IAAI,CAACC,WAAW,EAAE,CAAC;MAG3E,IAAI,CAACa,QAAQ,CAACE,EAAE,EAAE;QACd,IAAIF,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UACzB,MAAMK,SAAwB,GAAG,MAAMT,QAAQ,CAACO,IAAI,CAAC,CAAC;UACtD,MAAM,IAAID,KAAK,CAACG,SAAS,CAACC,OAAO,CAAC;QACtC,CAAC,MAAM;UACH,MAAM,IAAIJ,KAAK,CAAC,oBAAoB,GAAEN,QAAQ,CAACI,MAAM,CAAC;QAC1D;MACJ;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAaQ,UAAUA,CAACC,UAAkB,EAAmB;IACzD,IAAI;MACAf,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS0B,UAAU,EAAE,EAAE;QAChEC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMC,MAAM,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MACpC,IAAI,CAACxB,OAAO,GAAGuB,MAAM;MACrBjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgB,MAAM,CAAC;MAExC,IAAI,CAACtB,SAAS,GAAGd,QAAQ,CAACsC,MAAM;MAChC,OAAOF,MAAM;IACjB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAac,UAAUA,CAAA,EAAmB;IACtC,IAAI;MACA,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,kBAAkB,CAAC;MAChE,IAAI,CAACc,QAAQ,CAACE,EAAE,EAAE;QACdL,OAAO,CAACM,KAAK,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,MAAM,EAAEJ,QAAQ,CAACK,UAAU,CAAC;QACvE,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC7D;MACA,MAAMc,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAOW,IAAI;IACf,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAagB,QAAQA,CAACL,MAAc,EAAiB;IACjD,IAAI;MACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS4B,MAAM,eAAe,IAAI,CAAC3B,WAAW,EAAE,EAAE;QAC3F0B,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;QACd,MAAMO,SAAwB,GAAG,MAAMT,QAAQ,CAACO,IAAI,CAAC,CAAC;QACtD,MAAM,IAAID,KAAK,CAACG,SAAS,CAACC,OAAO,CAAC;MACtC;MACA,IAAI,CAACnB,OAAO,GAAGuB,MAAM;MACrB,MAAMI,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAACa,gBAAgB,CAACF,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ;EAEOkB,QAAQA,CAAA,EAAS;IACpB,IAAI;MACApB,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,kBAAkB,IAAI,CAACJ,WAAW,EAAE,EAAE;QAC7E0B,MAAM,EAAE,QAAQ;QAChBS,SAAS,EAAE;MACf,CAAC,CAAC;MAEF,IAAI,CAAC/B,OAAO,GAAG,IAAI;IAEvB,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAaoB,QAAQA,CAACC,KAAa,EAAiB;IAChD,IAAI;MACA,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,cAAc,IAAI,CAACJ,WAAW,EAAE,EAAE;QAChG0B,MAAM,EAAE,KAAK;QACbY,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEF;MACV,CAAC,CAAC;MACF,MAAMN,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAACa,gBAAgB,CAACF,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAawB,WAAWA,CAAA,EAAkB;IACtC,IAAI;MACA,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,iBAAiB,IAAI,CAACJ,WAAW,EAAE,EAAE;QACnG0B,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMK,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAACa,gBAAgB,CAACF,IAAI,CAAC;MAC3BrB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEoB,IAAI,CAAC;IACnD,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAayB,YAAYA,CAAA,EAAkB;IACvC,IAAI;MACA,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,kBAAkB,IAAI,CAACJ,WAAW,EAAE,EAAE;QACpG0B,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMK,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAACa,gBAAgB,CAACF,IAAI,CAAC;MAC3BrB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEoB,IAAI,CAAC;IAClD,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAa0B,YAAYA,CAAA,EAAkB;IACvC,IAAI;MACA,MAAM7B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,gBAAgB,EAAE;QAChFsB,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMK,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAACa,gBAAgB,CAACF,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAa2B,aAAaA,CAAA,EAAkB;IACxC,IAAI;MACA,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACf,QAAQ,SAAS,IAAI,CAACK,OAAO,QAAQ,CAAC;MAE3E,MAAM2B,IAAI,GAAG,MAAMlB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCV,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,QAAQ,CAAC;MAC9B,IAAI,CAACoB,gBAAgB,CAACF,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACf;EACJ;EAEO4B,SAASA,CAACjB,MAAc,EAAQ;IACnC,IAAI,CAACvB,OAAO,GAAGuB,MAAM;EACzB;EAEOkB,uBAAuBA,CAAA,EAAW;IAAA,IAAAC,qBAAA;IACrC,OAAO,EAAAA,qBAAA,OAAI,CAAC7C,MAAM,CAAC,IAAI,CAACD,WAAW,CAAC,cAAA8C,qBAAA,uBAA7BA,qBAAA,CAA+BC,OAAO,KAAI,EAAE;EACvD;EAEOC,sBAAsBA,CAAA,EAAW;IAAA,IAAAC,sBAAA;IACpC,OAAO,EAAAA,sBAAA,OAAI,CAAChD,MAAM,CAAC,IAAI,CAACD,WAAW,CAAC,cAAAiD,sBAAA,uBAA7BA,sBAAA,CAA+BC,KAAK,KAAI,GAAG;EACtD;EAEOC,qBAAqBA,CAAA,EAAW;IAAA,IAAAC,sBAAA;IACnC,OAAO,EAAAA,sBAAA,OAAI,CAACnD,MAAM,CAAC,IAAI,CAACD,WAAW,CAAC,cAAAoD,sBAAA,uBAA7BA,sBAAA,CAA+BF,KAAK,KAAI,EAAE;EACrD;EAEOG,oBAAoBA,CAAA,EAAa;IACpC,OAAO,IAAI,CAACnD,YAAY;EAC5B;EAEOoD,cAAcA,CAAA,EAAY;IAC7B,OAAO,IAAI,CAACnD,WAAW,CAACI,UAAU,KAAK,MAAM;EACjD;EAEOgD,SAASA,CAAA,EAAW;IACvB,OAAO,IAAI,CAACpD,WAAW,CAACK,MAAM;EAClC;EAEOgD,gBAAgBA,CAAA,EAAW;IAC9B,OAAO,IAAI,CAACrD,WAAW,CAACM,aAAa;EACzC;EAEOgD,aAAaA,CAAA,EAAW;IAC3B,OAAO,IAAI,CAACtD,WAAW,CAACI,UAAU;EACtC;EAEOmD,aAAaA,CAAA,EAAW;IAC3B,OAAO,IAAI,CAAC1D,WAAW;EAC3B;EAEQiC,gBAAgBA,CAACF,IAAc,EAAQ;IAC3C,IAAI,CAAC9B,MAAM,GAAG8B,IAAI,CAAC4B,OAAO;IAC1B,IAAI,CAACzD,YAAY,GAAG6B,IAAI,CAAC6B,WAAW;IACpC,IAAI,CAACzD,WAAW,GAAG4B,IAAI,CAACxB,UAAU;EACtC;EAEOsD,WAAWA,CAAA,EAAS;IACvB,IAAI,CAAC5D,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,WAAW,GAAG;MAAEI,UAAU,EAAE,OAAO;MAAEC,MAAM,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAG,CAAC;IACzE,IAAI,CAACL,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,SAAS,GAAG,IAAI;EACzB;AAEJ;AAEA,eAAeT,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}