{"ast":null,"code":"class GameClient {\n  constructor(playerName) {\n    this._baseURL = void 0;\n    this._playerName = void 0;\n    this._cells = void 0;\n    this._gameNumbers = void 0;\n    this._gameStatus = void 0;\n    this._baseURL = 'http://localhost:8080/game';\n    this._playerName = playerName;\n    this._cells = {};\n    this._gameNumbers = [];\n    this._gameStatus = {\n      status: 'false',\n      winner: '',\n      winnerFormula: ''\n    };\n  }\n\n  // Core game operations\n  async joinGame() {\n    try {\n      const response = await fetch(`${this._baseURL}/player/${this._playerName}`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error joining game:', error);\n      throw error;\n    }\n  }\n  async leaveGame() {\n    try {\n      const response = await fetch(`${this._baseURL}/player/${this._playerName}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n    } catch (error) {\n      console.error('Error quitting game:', error);\n      throw error;\n    }\n  }\n  async addToken(token) {\n    try {\n      const response = await fetch(`${this._baseURL}/add/token/${this._playerName}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: token\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error adding token:', error);\n      throw error;\n    }\n  }\n  async removeToken() {\n    try {\n      const response = await fetch(`${this._baseURL}/remove/token/${this._playerName}`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n      console.log(\"reveived data after remove\", data);\n    } catch (error) {\n      console.error('Error removing token:', error);\n      throw error;\n    }\n  }\n  async clearFormula() {\n    try {\n      const response = await fetch(`${this._baseURL}/clear/formula/${this._playerName}`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._updateGameState(data);\n      console.log(\"reveived data after clear\", data);\n    } catch (error) {\n      console.error('Error clearing formula:', error);\n      throw error;\n    }\n  }\n  async fetchGameNumbers() {\n    try {\n      const response = await fetch(`${this._baseURL}/numbers/game1`);\n      const data = await response.json();\n      console.log(\"reveived numbers after fetch\", data);\n      this._gameNumbers = data.gameNumbers;\n    } catch (error) {\n      console.error('Error getting game numbers:', error);\n      throw error;\n    }\n  }\n  async startNewGame() {\n    try {\n      const response = await fetch(`${this._baseURL}/newgame/game1`, {\n        method: 'PUT'\n      });\n      const data = await response.json();\n      this._gameNumbers = data.gameNumbers;\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      throw error;\n    }\n  }\n  async fetchGameState() {\n    try {\n      const response = await fetch(`${this._baseURL}/state/game1`);\n      const data = await response.json();\n      this._updateGameState(data);\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      throw error;\n    }\n  }\n  getCurrentPlayerFormula() {\n    var _this$_cells$this$_pl;\n    return ((_this$_cells$this$_pl = this._cells[this._playerName]) === null || _this$_cells$this$_pl === void 0 ? void 0 : _this$_cells$this$_pl.formula) || '';\n  }\n  getCurrentPlayerResult() {\n    var _this$_cells$this$_pl2;\n    return ((_this$_cells$this$_pl2 = this._cells[this._playerName]) === null || _this$_cells$this$_pl2 === void 0 ? void 0 : _this$_cells$this$_pl2.value) || '0';\n  }\n  getCurrentPlayerError() {\n    var _this$_cells$this$_pl3;\n    return ((_this$_cells$this$_pl3 = this._cells[this._playerName]) === null || _this$_cells$this$_pl3 === void 0 ? void 0 : _this$_cells$this$_pl3.value) || '';\n  }\n  getGameNumbersString() {\n    return this._gameNumbers;\n  }\n  isGameFinished() {\n    return this._gameStatus.status === 'true';\n  }\n  getWinner() {\n    return this._gameStatus.winner;\n  }\n  getWinnerFormula() {\n    return this._gameStatus.winnerFormula;\n  }\n  getGameStatus() {\n    return this._gameStatus.status;\n  }\n  _updateGameState(data) {\n    this._cells = data.players;\n    this._gameNumbers = data.gameNumbers;\n    this._gameStatus = data.gameStatus;\n  }\n}\nexport default GameClient;","map":{"version":3,"names":["GameClient","constructor","playerName","_baseURL","_playerName","_cells","_gameNumbers","_gameStatus","status","winner","winnerFormula","joinGame","response","fetch","method","ok","errorData","json","Error","message","data","_updateGameState","error","console","leaveGame","addToken","token","headers","body","removeToken","log","clearFormula","fetchGameNumbers","gameNumbers","startNewGame","fetchGameState","getCurrentPlayerFormula","_this$_cells$this$_pl","formula","getCurrentPlayerResult","_this$_cells$this$_pl2","value","getCurrentPlayerError","_this$_cells$this$_pl3","getGameNumbersString","isGameFinished","getWinner","getWinnerFormula","getGameStatus","players","gameStatus"],"sources":["/Users/tanjun/Downloads/24PointsGameOnline/frontend/src/services/GameClient.ts"],"sourcesContent":["import { PageInfo, CellInfo, GameStatusInfo } from '../GameDefinitions';\n\ninterface ErrorResponse {\n    message: string;\n    code: string;\n    timestamp: number;\n}\n\nclass GameClient {\n    private _baseURL: string;\n    private _playerName: string; \n    private _cells: {[playerName: string]: CellInfo};\n    private _gameNumbers: string[];\n    private _gameStatus: GameStatusInfo;\n\n    constructor(playerName: string) {\n        this._baseURL = 'http://localhost:8080/game';\n        this._playerName = playerName;\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { status: 'false', winner: '', winnerFormula: '' };\n    }\n\n    // Core game operations\n    public async joinGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/${this._playerName}`, {\n                method: 'PUT'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error joining game:', error);\n            throw error;\n        }\n    }\n\n    public async leaveGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/${this._playerName}`, {\n                method: 'DELETE'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n\n        } catch (error) {\n            console.error('Error quitting game:', error);\n            throw error;\n        }\n    }\n\n    public async addToken(token: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/add/token/${this._playerName}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'text/plain'\n                },\n                body: token\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error adding token:', error);\n            throw error;\n        }\n    }\n\n    public async removeToken(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/remove/token/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after remove\", data);\n        } catch (error) {\n            console.error('Error removing token:', error);\n            throw error;\n        }\n    }\n\n    public async clearFormula(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/clear/formula/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after clear\", data);\n        } catch (error) {\n            console.error('Error clearing formula:', error);\n            throw error;\n        }\n    }\n\n    \n    public async fetchGameNumbers(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/numbers/game1`);\n            const data = await response.json();\n            console.log(\"reveived numbers after fetch\", data);\n            this._gameNumbers = data.gameNumbers;\n        } catch (error) {\n            console.error('Error getting game numbers:', error);\n            throw error;\n        }\n    }\n    \n\n    public async startNewGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/newgame/game1`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._gameNumbers = data.gameNumbers;\n        } catch (error) {\n            console.error('Error starting new game:', error);\n            throw error;\n        }\n    }\n\n    public async fetchGameState(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/state/game1`);\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            throw error;\n        }\n    }\n\n    public getCurrentPlayerFormula(): string {\n        return this._cells[this._playerName]?.formula || '';\n    }\n\n    public getCurrentPlayerResult(): string {\n        return this._cells[this._playerName]?.value || '0';\n    }\n\n    public getCurrentPlayerError(): string {\n        return this._cells[this._playerName]?.value || '';\n    }\n\n    public getGameNumbersString(): string[] {\n        return this._gameNumbers;\n    }\n\n    public isGameFinished(): boolean {\n        return this._gameStatus.status === 'true';\n    }\n\n    public getWinner(): string {\n        return this._gameStatus.winner;\n    }\n\n    public getWinnerFormula(): string {\n        return this._gameStatus.winnerFormula;\n    }\n\n    public getGameStatus(): string {\n        return this._gameStatus.status;\n    }\n\n    private _updateGameState(data: PageInfo): void {\n        this._cells = data.players;\n        this._gameNumbers = data.gameNumbers;\n        this._gameStatus = data.gameStatus;\n    }\n\n}\n\nexport default GameClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}