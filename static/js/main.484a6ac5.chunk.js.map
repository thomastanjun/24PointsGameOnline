{"version":3,"sources":["services/GameClient.ts","contexts/GameClientContext.tsx","components/GameStyles.tsx","pages/LoginPage.tsx","hooks/useOnlinePlayerCount.ts","hooks/useGameExit.ts","pages/ModeSelection.tsx","pages/RoomSelection.tsx","hooks/useGameLogic.ts","components/GameButtons.tsx","pages/GamePageSingle.tsx","pages/GamePageMulti.tsx","components/ProtectedRoutes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameMode","GameClient","constructor","playerName","_baseURL","_playerName","_cells","_gameNumbers","_gameStatus","_roomID","_gameMode","_rooms","this","process","gameStatus","winner","winnerFormula","console","log","getOnlinePlayerNumber","response","fetch","ok","error","status","statusText","Error","json","verifyPlayerName","errorData","message","createRoom","maxPlayers","method","roomID","text","SINGLE","fetchRooms","addPlayer","joinGame","data","_updateGameState","exitGame","keepalive","addToken","token","headers","body","removeToken","clearFormula","startNewGame","fetchGamePage","setRoomID","getCurrentPlayerFormula","_this$_cells$this$_pl","formula","getCurrentPlayerResult","_this$_cells$this$_pl2","result","getCurrentPlayerError","_this$_cells$this$_pl3","getGameNumbersString","isGameFinished","getWinner","getWinnerFormula","getGameStatus","getPlayerName","getOtherPlayers","otherPlayers","cellInfor","Object","entries","value","players","gameNumbers","resetClient","GameClientContext","createContext","client","setGameClient","GameClientProvider","_ref","children","useState","_jsx","Provider","LoginContainer","styled","div","GameTitle","h1","SubTitle","p","Card","WelcomeText","h2","LoginForm","form","InputGroup","Label","label","SubmitButton","input","button","GameRules","RulesTitle","h3","RulesList","Rule","OnlinePlayersBox","OnlineDot","OnlineCount","span","Container","Header","Title","FormulaDisplay","ResultDisplay","Input","WinnerDisplay","WinnerFormula","PlayerName","GameAreaSingle","GameAreaMulti","CurrentPlayerAreaSingle","CurrentPlayerAreaMulti","OtherPlayersArea","PlayerCard","PlayerHeader","GameTimer","props","isRevealed","delay","LoginPage","useContext","navigate","useNavigate","setPlayerName","onlinePlayers","useOnlinePlayerCount","setOnlinePlayers","useEffect","fetchCount","async","count","interval","setInterval","clearInterval","_jsxs","onSubmit","e","preventDefault","trim","alert","onChange","target","placeholder","required","type","useGameExit","handleBeforeUnload","window","addEventListener","removeEventListener","ModeButton","ModeDescription","ModeSelection","location","useLocation","state","onClick","mode","handleSingleMode","RoomList","RoomCard","Button","RoomSelection","rooms","setRooms","roomList","length","maxPlayer","map","room","hostPlayer","vacancySeats","handleRoomClick","useGameLogic","setFormula","setResult","setError","setOtherPlayers","setGameNumbers","usedButtonIndices","setUsedButtonIndices","tokenHistory","setTokenHistory","setWinner","setWinnerFormula","gameTime","setGameTime","isCountingDown","setIsCountingDown","setCount","updateDisplay","timer","setTimeout","prev","clearTimeout","handleTokenClick","handleNumberTokenClick","index","handleRemove","newHistory","slice","lastToken","filter","i","handleClear","handleNewGame","handleLogout","NumberButton","OperatorButton","ControlButton","NumbersGrid","OperatorGrid","QuitButton","ButtonGroup","GamePageSingle","_Fragment","className","num","op","GamePageMulti","timerActive","setTimerActive","revealedNumbers","setRevealedNumbers","pollingInterval","fetchGameState","revealIntervals","revealTimer","newState","push","forEach","style","display","justifyContent","alignItems","fontSize","fontWeight","height","disabled","includes","backgroundColor","color","cursor","marginTop","marginBottom","name","_ref2","_ref3","cell","textAlign","padding","ProtectedRoutes","Outlet","Navigate","to","replace","App","BrowserRouter","basename","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.484a6ac5.chunk.js","sourcesContent":["import { PageInfo, CellInfo, GameStatusInfo } from '../GameDefinitions';\nimport { Rooms } from '../GameDefinitions';\n\ninterface ErrorResponse {\n    message: string;\n    code: string;\n    timestamp: number;\n}\n\nexport enum GameMode {\n    SINGLE = 'SINGLE',\n    MULTI = 'MULTI'\n}\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/game';\n\nclass GameClient {\n    private _baseURL: string;\n    private _playerName: string; \n    private _cells: { [playerName: string]: CellInfo };\n    private _gameNumbers: string[];\n    private _gameStatus: GameStatusInfo;\n    private _roomID: string | null;\n    private _gameMode: GameMode | null;\n\n    private _rooms: {[roomID: string]: string};\n\n    constructor(playerName: string) {\n        this._baseURL = API_URL;\n        this._playerName = playerName;\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n        console.log(\"GameClient initialized with player:\", playerName);\n\n        this._rooms = {};\n    }\n\n    // Core game operations\n    public async getOnlinePlayerNumber(): Promise<number> {\n        try {\n            const response = await fetch(`${this._baseURL}/players/count`);\n\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n            \n        } catch (error) {\n            console.error('Error fetching online player number:', error);\n            throw error;\n        }\n    }\n\n\n    public async verifyPlayerName(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/${this._playerName}`); \n\n            \n            if (!response.ok) {\n                if (response.status === 409) {\n                    const errorData: ErrorResponse = await response.json();\n                    throw new Error(errorData.message);\n                } else {\n                    throw new Error('Unexpected error: '+ response.status);\n                }\n            }\n        } catch (error) {\n            console.error('Player Already logged in:', error);\n            throw error;\n        }\n    }\n\n    public async createRoom(maxPlayers: string): Promise<string> {\n        try {\n            console.log(\"creating game\");\n            const response = await fetch(`${this._baseURL}/room/${maxPlayers}`, {\n                method: 'POST'\n            });\n            const roomID = await response.text();\n            this._roomID = roomID;\n            console.log(\"GameClient roomID\", roomID);\n\n            this._gameMode = GameMode.SINGLE ;\n            return roomID;\n        } catch (error) {\n            console.error('Error creating room:', error);\n            throw error;\n        }\n    }\n\n    public async fetchRooms(): Promise<Rooms> {\n        try {\n            const response = await fetch(`${this._baseURL}/rooms/available`);\n            if (!response.ok) {\n                console.error('Server response:', response.status, response.statusText);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching rooms:', error);\n            throw error;\n        }\n    }\n\n    public async addPlayer(playerName: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/player/add/${playerName}`, {\n                method: 'PUT'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n        } catch (error) {\n            console.error('Error adding player:', error);\n            throw error;\n        }\n    }\n\n    public async joinGame(roomID: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${roomID}/add/player/${this._playerName}`, {\n                method: 'PUT'\n            });\n            if (!response.ok) {\n                const errorData: ErrorResponse = await response.json();\n                throw new Error(errorData.message);\n            }\n            this._roomID = roomID;\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error joining game:', error);\n            throw error;\n        }\n    }\n\n    public exitGame(): void {\n        try {\n            fetch(`${this._baseURL}/player/remove/${this._playerName}`, {\n                method: 'DELETE',\n                keepalive: true\n            });\n\n            this._roomID = null;\n\n        } catch (error) {\n            console.error('Error during exit:', error);\n            throw error;\n        }\n    }\n\n    public async addToken(token: string): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/add/token/${this._playerName}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'text/plain'\n                },\n                body: token\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error adding token:', error);\n            throw error;\n        }\n    }\n\n    public async removeToken(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/remove/token/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after remove\", data);\n        } catch (error) {\n            console.error('Error removing token:', error);\n            throw error;\n        }\n    }\n\n    public async clearFormula(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/clear/formula/${this._playerName}`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n            console.log(\"reveived data after clear\", data);\n        } catch (error) {\n            console.error('Error clearing formula:', error);\n            throw error;\n        }\n    }\n\n    public async startNewGame(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/newgame/game1`, {\n                method: 'PUT'\n            });\n            const data = await response.json();\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error starting new game:', error);\n            throw error;\n        }\n    }\n\n    public async fetchGamePage(): Promise<void> {\n        try {\n            const response = await fetch(`${this._baseURL}/room/${this._roomID}/state`);\n            \n            const data = await response.json();\n            console.log(\"fetch\", response);\n            this._updateGameState(data);\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            throw error;\n        }\n    }\n\n    public setRoomID(roomID: string): void {\n        this._roomID = roomID;\n    }\n\n    public getCurrentPlayerFormula(): string {\n        return this._cells[this._playerName]?.formula || '';\n    }\n\n    public getCurrentPlayerResult(): string {\n        console.log(\"Current Player Result: \", this._cells[this._playerName].result);\n        return this._cells[this._playerName]?.result || '0';\n    }\n\n    public getCurrentPlayerError(): string {\n        return this._cells[this._playerName]?.error || '';\n    }\n\n    public getGameNumbersString(): string[] {\n        return this._gameNumbers;\n    }\n\n    public isGameFinished(): boolean {\n        return this._gameStatus.gameStatus === 'true';\n    }\n\n    public getWinner(): string {\n        return this._gameStatus.winner;\n    }\n\n    public getWinnerFormula(): string {\n        return this._gameStatus.winnerFormula;\n    }\n\n    public getGameStatus(): string {\n        return this._gameStatus.gameStatus;\n    }\n\n    public getPlayerName(): string {\n        return this._playerName;\n    }\n\n    public getOtherPlayers(): { [playerName: string]: { formula: string, value: string }} {\n        const otherPlayers: { [playerName: string]: { formula: string, value: string } } = {};\n\n        for (const [playerName, cellInfor] of Object.entries(this._cells)) {\n            if (playerName !== this._playerName) {\n                otherPlayers[playerName] = { \n                    formula: cellInfor.formula || '', \n                    value: cellInfor.result || '0'};\n            }\n        }\n        return otherPlayers;\n    }\n\n    private _updateGameState(data: PageInfo): void {\n        console.log(\"Raw data received:\", data);\n        console.log(\"Players structure:\", data.players);\n        if (data.players && this._playerName in data.players) {\n            console.log(\"Current player cell:\", data.players[this._playerName]);\n        }\n        this._cells = data.players;\n        this._gameNumbers = data.gameNumbers;\n        this._gameStatus = data.gameStatus;\n    }\n\n    public resetClient(): void {\n        this._cells = {};\n        this._gameNumbers = [];\n        this._gameStatus = { gameStatus: 'false', winner: '', winnerFormula: '' };\n        this._roomID = null;\n        this._gameMode = null;\n    }\n\n}\n\nexport default GameClient;","import React, { createContext, useState } from 'react';\nimport GameClient from '../services/GameClient';\nimport { GameClientProviderProps } from '../types/GameClientProviderProps';\n\ntype GameClientContextType = {\n    client: GameClient | null;\n    setGameClient: (client: GameClient) => void;\n  };\n  \n  export const GameClientContext = createContext<GameClientContextType>({\n    client: null,\n    setGameClient: () => {},\n  });\n  \n  export const GameClientProvider: React.FC<GameClientProviderProps> = ({ children }) => {\n    const [client, setGameClient] = useState<GameClient | null>(null);\n  \n    return (\n      <GameClientContext.Provider value={{ client, setGameClient }}>\n        {children}\n      </GameClientContext.Provider>\n    );\n  };","import styled from 'styled-components';\n\n\n//Login Page\nexport const LoginContainer = styled.div`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n    padding: 20px;\n`;\n\nexport const GameTitle = styled.h1`\n    font-size: 4rem;\n    color: #fff;\n    margin-bottom: 0.5rem;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n`;\n\nexport const SubTitle = styled.p`\n    font-size: 1.2rem;\n    color: #e2e8f0;\n    margin-bottom: 2rem;\n`;\n\nexport const Card = styled.div`\n    background: rgba(255, 255, 255, 0.95);\n    padding: 2rem;\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n    width: 100%;\n    max-width: 400px;\n`;\n\nexport const WelcomeText = styled.h2`\n    text-align: center;\n    color: #2d3748;\n    margin-bottom: 1.5rem;\n    font-size: 1.8rem;\n`;\n\nexport const LoginForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n`;\n\nexport const InputGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nexport const Label = styled.label`\n    color: #4a5568;\n    font-size: 0.9rem;\n`;\n\nexport const LoginInput = styled.input`\n    padding: 0.75rem;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.2s;\n\n    &:focus {\n        outline: none;\n        border-color: #4299e1;\n    }\n`;\n\nexport const SubmitButton = styled.button`\n    background: #4299e1;\n    color: white;\n    padding: 1rem;\n    border: none;\n    border-radius: 8px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    cursor: pointer;\n    transition: transform 0.2s, background-color 0.2s;\n\n    &:hover {\n        background: #3182ce;\n        transform: translateY(-2px);\n    }\n\n    &:active {\n        transform: translateY(0);\n    }\n`;\n\nexport const GameRules = styled.div`\n    margin-top: 2rem;\n    padding-top: 1.5rem;\n    border-top: 1px solid #e2e8f0;\n`;\n\nexport const RulesTitle = styled.h3`\n    color: #2d3748;\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n`;\n\nexport const RulesList = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nexport const Rule = styled.p`\n    color: #4a5568;\n    font-size: 0.9rem;\n`;\n\n// Online Players Number Display\n\nexport const OnlinePlayersBox = styled.div`\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    background: rgba(255, 255, 255, 0.9);\n    padding: 10px 20px;\n    border-radius: 20px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const OnlineDot = styled.div`\n    width: 8px;\n    height: 8px;\n    background: #4ade80;\n    border-radius: 50%;\n    animation: pulse 1.5s infinite;\n\n    @keyframes pulse {\n        0% { opacity: 1; }\n        50% { opacity: 0.5; }\n        100% { opacity: 1; }\n    }\n`;\n\nexport const OnlineCount = styled.span`\n    color: #1f2937;\n    font-weight: 500;\n`;\n\n//\n\n\n\n\nexport const Container = styled.div`\n  min-height: 100vh;\n  padding: 20px;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 24px;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  margin-bottom: 24px;\n`;\n\nexport const Title = styled.h1`\n  font-size: 24px;\n  margin: 0;\n  color: #2a2a2a;\n`;\n\nexport const GameBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const FormulaDisplay = styled.div`\n  background: #f9f9f9;\n  padding: 16px;\n  border-radius: 8px;\n  font-size: 18px;\n  min-height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border: 1px solid #e0e0e0;\n  color: #333;\n  word-break: break-word;\n  margin: 10px 0;\n`;\n\nexport const ResultDisplay = styled.div`\n  background: #e6f7ff;\n  padding: 12px;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n  border: 1px solid #91d5ff;\n  color: #0050b3;\n  margin: 5px 0 15px 0;\n`;\n\nexport const Input = styled.input`\n  padding: 10px;\n  width: 200px;\n  border: 2px solid #d3d6da;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\n\nexport const WinnerDisplay = styled.div`\n  background: #f6ffed;\n  border: 1px solid #b7eb8f;\n  border-radius: 12px;\n  padding: 24px;\n  margin-bottom: 24px;\n  text-align: center;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n\n  h2 {\n      color: #52c41a;\n      margin-top: 0;\n      margin-bottom: 16px;\n  }\n\n  div {\n      margin-bottom: 8px;\n  }\n`;\n\nexport const WinnerFormula = styled.div`\n  font-weight: bold;\n  font-size: 20px;\n  margin: 12px 0;\n  padding: 12px;\n  background: #fff;\n  border-radius: 8px;\n  color: #333;\n`;\n\nexport const PlayerName = styled.div`\n  font-size: 18px;\n  color: #1a1a1b;\n  margin-bottom: 10px;\n`;\n\nexport const GameControls = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #d3d6da;\n`;\n\nexport const GameAreaSingle = styled.div`\n  display: flex;\n  Justrify-content: center;\n  align-items: center;\n  padding: 2rem;\n  width: 100%;\n`;\n\nexport const GameAreaMulti = styled.div`\n  display: flex;\n  gap: 24px;\n  width: 100%;\n  padding: 0;\n  flex-direction: row;\n  justify-content: center;\n\n  @media (max-width: 1024px) {\n      flex-direction: column;\n      align-items: center;\n  }\n`;\n\n\nexport const CurrentPlayerAreaSingle = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1.5rem;\n  max-width: 600px;\n  width: 100%;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const CurrentPlayerAreaMulti = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  background: white;\n  padding: 24px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n`;\n\nexport const OtherPlayersArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 100%;\n  max-width: 320px;\n`;\n\nexport const OtherPlayersHeader = styled.h3`\n  margin: 0 0 16px 0;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #e8e8e8;\n  color: #333;\n`;\n\n\nexport const PlayerCard = styled.div`\n  background: white;\n  padding: 16px;\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const PlayerHeader = styled.div`\n  font-weight: bold;\n  font-size: 16px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #f0f0f0;\n  color: #1a1a1a;\n`;\n\nexport const GameTimer = styled.div`\n    background: #f0f0f0;\n    color: #333;\n    padding: 8px 16px;\n    border-radius: 16px;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n`;\nexport const CountdownOverlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  font-size: 6rem;\n  font-weight: bold;\n  color: #0066cc;\n  animation: pulse 1s infinite;\n\n  @keyframes pulse {\n      0% { transform: scale(1); opacity: 1; }\n      50% { transform: scale(1.1); opacity: 0.8; }\n      100% { transform: scale(1); opacity: 1; }\n  }\n`;\n\nexport const RevealingNumber = styled.div<{ delay: number, isRevealed: boolean }>`\n    animation: ${props => props.isRevealed ? 'flipIn 0.5s ease-out forwards' : 'none'};\n    animation-delay: ${props => props.delay}s;\n    opacity: ${props => props.isRevealed ? 1 : 0};\n    transform: rotateY(90deg);\n    \n    @keyframes flipIn {\n        from { transform: rotateY(90deg); opacity: 0; }\n        to { transform: rotateY(0deg); opacity: 1; }\n    }\n`;","import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {\n    LoginContainer,\n    Rule,\n    Card,\n    GameTitle,\n    LoginForm,\n    WelcomeText,\n    Label,\n    GameRules,\n    SubmitButton,\n    RulesList,\n    InputGroup,\n    RulesTitle,\n    Input,\n    SubTitle,\n    OnlinePlayersBox,\n    OnlineDot,\n    OnlineCount\n} from '../components/GameStyles';\nimport { useOnlinePlayerCount} from '../hooks/useOnlinePlayerCount';\n\n\nconst LoginPage = () => {\n    const { setGameClient } = useContext(GameClientContext);\n    const navigate = useNavigate();\n    const [playerName, setPlayerName] = useState('');\n    const  onlinePlayers  = useOnlinePlayerCount();\n\n\n\n    const handleLogin = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (!playerName.trim()) {\n            alert(\"Player name cannot be empty\");\n            return \n        }\n            \n        const client = new GameClient(playerName);\n        try{\n            await client.addPlayer(playerName);\n            setGameClient(client);\n            console.log(\"LoginPage Player: \", client.getPlayerName());\n\n            navigate('/mode-selection');\n        } catch (error) {\n            if (error instanceof Error) {\n                alert(error.message);\n            } else {\n                console.error('Unexpected error:', error);\n                alert(\"Unexpected error\");\n            }\n        }\n        \n    };\n\n    return (\n        <LoginContainer>\n            <OnlinePlayersBox>\n                <OnlineDot />\n                <OnlineCount>Online: {onlinePlayers}</OnlineCount>\n            </OnlinePlayersBox>\n            <GameTitle>24</GameTitle>\n            <SubTitle>Combine Numbers to Hit 24</SubTitle>\n            \n            <Card>\n                <WelcomeText>Welcome to the Game</WelcomeText>\n                <LoginForm onSubmit={handleLogin}>\n                    <InputGroup>\n                        <Label>Enter Your Name</Label>\n                        <Input\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            placeholder=\"Your player name\"\n                            required\n                        />\n                    </InputGroup>\n                    <SubmitButton type=\"submit\">\n                        Start Playing!\n                    </SubmitButton>\n                </LoginForm>\n                \n                <GameRules>\n                    <RulesTitle>How to Play:</RulesTitle>\n                    <RulesList>\n                        <Rule>• Use all four numbers exactly once</Rule>\n                        <Rule>• Use basic operations (+, -, ×, ÷) and parentheses</Rule>\n                        <Rule>• Make the result equal to 24</Rule>\n                        <Rule>• Play solo or challenge other players</Rule>\n                    </RulesList>\n                </GameRules>\n            </Card>\n        </LoginContainer>\n    );\n};\n\nexport default LoginPage;","import React, { useState, useEffect } from 'react';\nimport { Input } from '../components/GameStyles';\n\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nexport const useOnlinePlayerCount = () => {\n    const [onlinePlayers, setOnlinePlayers] = useState<number>(0);\n    \n    useEffect(() => {\n        const fetchCount = async () => {\n            try {\n                const response = await fetch(`${BASE_URL}/players/count`);\n    \n                if (!response.ok) {\n                    console.error('Server response:', response.status, response.statusText);\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const count = await response.json();\n                setOnlinePlayers(count);                \n            } catch (error) {\n                console.error('Error fetching online player number:', error);\n                throw error;\n            }\n        }\n\n        fetchCount();\n        console.log(\"useOnlinePlayerCount: Fetching online player count\");\n        const interval = setInterval(fetchCount, 100);\n        return () => clearInterval(interval);\n\n    }, []);\n\n    return onlinePlayers;\n};\n\n","import React, { useState, useEffect } from 'react';\nimport  GameClient from '../services/GameClient';\n\nexport const useGameExit = (client: GameClient | null) => {\n\n    useEffect(() => {\n        const handleBeforeUnload =  (e: BeforeUnloadEvent) => {\n            if (client) {\n                client.exitGame();\n            }\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n\n    }, [client]);\n\n}","import React from 'react';\nimport { useContext } from 'react';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport GameClient from '../services/GameClient';\nimport { useGameExit } from '../hooks/useGameExit';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  padding: 20px;\n`;\n\nconst Title = styled.h2`\n  font-size: 32px;\n  color: #1a1a1b;\n  margin-bottom: 30px;\n`;\n\nconst ModeButton = styled.button`\n  width: 200px;\n  padding: 20px;\n  margin: 10px;\n  font-size: 18px;\n  font-weight: bold;\n  background: white;\n  border: 2px solid #d3d6da;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #f4f4f4;\n    transform: translateY(-2px);\n  }\n`;\n\nconst ModeDescription = styled.p`\n  font-size: 14px;\n  color: #666;\n  margin-top: 5px;\n`;\n\n\nconst ModeSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(\"Location state: \", location.state);\n  \n  const { client } = useContext(GameClientContext);\n\n\n  const handleSingleMode = async() => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    if (!client) {\n      return;\n    }\n    const roomID = await client.createRoom('1');\n    await client.joinGame(roomID);\n    navigate('/game/single', {\n       state: { \n        mode: 'single' } });\n  };\n\n  const handleMultiMode = (isSinglePlayer: boolean) => {\n    console.log(\"ModeSelection Player: \", client?.getPlayerName());\n    navigate('/rooms', {\n       state: { \n        mode: 'multi' } });\n  };\n\n  useGameExit(client);\n  \n  return (\n    <Container>\n      <Title>Select Game Mode</Title>\n      <div>\n        <ModeButton onClick={() => handleSingleMode()}>\n          Single Player\n          <ModeDescription>Practice by yourself</ModeDescription>\n        </ModeButton>\n        \n        <ModeButton onClick={() => handleMultiMode(false)}>\n          Multiplayer\n          <ModeDescription>Compete with other players</ModeDescription>\n        </ModeButton>\n      </div>\n    </Container>\n  );\n};\n\nexport default ModeSelection;","\nimport styled from 'styled-components';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport {Rooms, RoomInfo} from '../GameDefinitions';\nimport { useGameExit } from '../hooks/useGameExit';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst RoomList = styled.div`\n  width: 100%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nconst RoomCard = styled.div`\n  padding: 15px;\n  border: 1px solid #d3d6da;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  \n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  \n  &:hover {\n    background: #5c935c;\n  }\n`;\n\nconst RoomSelection: React.FC = () => {\n  const navigate = useNavigate();\n  const [rooms, setRooms] = useState<RoomInfo[]>([]);\n  const { client } = useContext(GameClientContext);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (client) {\n      interval = setInterval(async () => {\n        const response = await client.fetchRooms();\n        if (response.status === 'Empty') {\n          setRooms([]);\n          return;\n        } else {\n          console.log(\"RoomList: \", response.status);\n          console.log(\"RoomListLength: \", response.roomList.length);\n          setRooms(response.roomList);}\n      }, 1000);}\n\n      return () => clearInterval(interval);\n    \n  }, [client]);\n\n  const handleRoomClick = async (roomID: string) => {\n    if (!client) return;\n    try {\n      const response = await client.joinGame(roomID);\n      navigate(`/game/multi/${roomID}`);\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n\n  const createRoom = async (maxPlayer: string) => {\n    if (!client) return;\n    try {\n      const roomID = await client.createRoom(maxPlayer);\n      await client.joinGame(roomID);\n      navigate(`/game/multi/${roomID}`, {\n        state: { \n         mode: 'multi' } });\n\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  const renderRooms = () => {\n    if (rooms.length === 0) {\n      return <p>No rooms available</p>;\n    }\n    return rooms.map((room: RoomInfo) => (\n      <RoomCard key={room.roomID}>\n        <div>\n          <h3>Room {room.roomID}</h3>\n          <p>Host: {room.hostPlayer}</p>\n          <p>Available Seats: {room.vacancySeats}</p>\n        </div>\n        <Button onClick={() => handleRoomClick(room.roomID)}>\n          Join Room\n        </Button>\n      </RoomCard>\n    ));\n  };\n\n  useGameExit(client);\n\n  return (\n    <Container>\n      <h1>Game Rooms</h1>\n      <Button onClick={() => createRoom(\"8\")}>Create New Room</Button>\n      \n      <RoomList>\n        {renderRooms()}\n      </RoomList>\n    </Container>\n  );\n};\n\nexport default RoomSelection;","import { useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport GameClient from '../services/GameClient';\n\nexport const useGameLogic = () => {\n    const navigate = useNavigate();\n    const { client } = useContext(GameClientContext);\n    \n    const [playerName, setPlayerName] = useState(client?.getPlayerName() || '');\n    const [formula, setFormula] = useState(client?.getCurrentPlayerFormula() || '');\n    const [result, setResult] = useState(client?.getCurrentPlayerResult() || '0+default');\n    const [error, setError] = useState(client?.getCurrentPlayerError() || 'default error');\n    const [otherPlayers, setOtherPlayers] = useState<{ [playerName: string]: { formula: string, value: string } }>({});\n    const [gameNumbers, setGameNumbers] = useState<string[]>(client?.getGameNumbersString() || []);\n    const [usedButtonIndices, setUsedButtonIndices] = useState<number[]>([]);\n    const [tokenHistory, setTokenHistory] = useState<number[]>([]);\n    const [winner, setWinner] = useState<string>('');\n    const [winnerFormula, setWinnerFormula] = useState<string>('');\n    const [gameTime, setGameTime] = useState<number>(0);\n    const [isCountingDown, setIsCountingDown] = useState(false);\n    const [count, setCount] = useState(3);\n\n    const updateDisplay = (client: GameClient) => {\n        setFormula(client.getCurrentPlayerFormula());\n        setError(client.getCurrentPlayerError());\n        setResult(client.getCurrentPlayerResult() + client.getCurrentPlayerError());\n        setGameNumbers(client.getGameNumbersString());\n        setOtherPlayers(client.getOtherPlayers());\n        setWinner(client.getWinner());\n        setWinnerFormula(client.getWinnerFormula());\n    };\n\n    const handleTokenClick = async (token: string) => {\n        if (!client) return;\n\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n            setTokenHistory(prev => [...prev, -1]);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleNumberTokenClick = async (token: string, index: number) => {\n        if (!client) return;\n\n        try {\n            await client.addToken(token);\n            updateDisplay(client);\n            setUsedButtonIndices(prev => [...prev, index]);\n            setTokenHistory(prev => [...prev, index]);\n            \n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleRemove = async () => {\n        if (!client) return;\n        try {\n            await client.removeToken();\n            updateDisplay(client);\n            setTokenHistory( prev => {\n                if (prev.length === 0) return prev;\n\n                const newHistory = prev.slice(0, -1);\n                const lastToken = prev[prev.length - 1];\n\n                if (lastToken > -1) {\n                    setUsedButtonIndices(prev => prev.filter(i => i !== lastToken));\n                }\n\n                return newHistory;\n            }\n\n            )\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleClear = async () => {\n        if (!client) return;\n        try {\n            await client.clearFormula();\n            updateDisplay(client);\n            setUsedButtonIndices([]);\n            setTokenHistory([]);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleNewGame = async () => {\n        if (!client) return;\n        try {\n            await client.startNewGame();\n            updateDisplay(client);\n            setUsedButtonIndices([]);\n            setTokenHistory([]);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleLogout = async () => {\n        if (!client) return;\n        try {\n            await client.exitGame();\n            client.resetClient();\n            navigate('/mode-selection');\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (isCountingDown && count > 1) {\n            timer = setTimeout(() => setCount(prev => prev - 1), 1000);\n        } else if (count === 1) {\n            timer = setTimeout(() => {\n                setIsCountingDown(false);\n                setCount(3); \n            }, 1000);\n        }\n        return () => clearTimeout(timer);\n    }, [count, isCountingDown]);\n\n    useEffect(() => {\n        let interval: NodeJS.Timeout;\n        if (!isCountingDown && !winner) {\n            interval = setInterval(() => {\n                    setGameTime(prev => prev + 0.01);\n            },10);\n        }\n        return () => clearInterval(interval);\n    });\n\n    return {\n        client,\n        playerName,\n        formula,\n        result,\n        error,\n        otherPlayers,\n        gameNumbers,\n        usedButtonIndices,\n        winner,\n        winnerFormula,\n        gameTime,\n        isCountingDown,\n        count,\n        updateDisplay,\n        handleTokenClick,\n        handleNumberTokenClick,\n        handleRemove,\n        handleClear,\n        handleNewGame,\n        handleLogout\n    }\n}","import styled from 'styled-components';\n\n// Game number buttons\nexport const NumberButton = styled.button`\n  width: 60px;\n  height: 60px;\n  border: 2px solid #d3d6da;\n  border-radius: 4px;\n  font-size: 24px;\n  font-weight: bold;\n  background: white;\n  color: #1a1a1b;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #f4f4f4;\n  }\n`;\n\n// Operator buttons (+, -, *, /, (, ))\nexport const OperatorButton = styled.button`\n  width: 45px;\n  height: 45px;\n  border: none;\n  border-radius: 4px;\n  font-size: 20px;\n  font-weight: bold;\n  background: #818384;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #6e6e6e;\n  }\n`;\n\n// Control buttons (Clear, Undo, New Game, Quit)\nexport const ControlButton = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  background: #6aaa64;\n  color: white;\n  cursor: pointer;\n  margin: 0 5px;\n  transition: all 0.2s;\n\n  &:hover {\n    background: #5c935c;\n  }\n`;\n\n// Button container layouts\nexport const NumbersGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 16px;\n  justify-items: center;\n  margin-bottom: 5px;\n`;\n\nexport const OperatorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 12px;\n  justify-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const QuitButton = styled(ControlButton)`\n  background: #dc3545;\n  position: absolute;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 14px;\n  padding: 8px 16px;\n\n  &:hover {\n    background: #c82333;\n  }\n`;\n\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  gap: 8px;\n  margin: 15px 0;\n  justify-content: center;\n\n  ${ControlButton} {\n    flex: 1;\n    max-width: 120px;  // Prevent buttons from getting too wide\n  }\n`;\n\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport { useGameLogic } from '../hooks/useGameLogic';\nimport { useGameExit } from '../hooks/useGameExit';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaSingle,\n    CurrentPlayerAreaSingle,\n    FormulaDisplay,\n    ResultDisplay,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameTimer\n} from '../components/GameStyles';\n\n\n\nconst GamePageSingle: React.FC = () => {\n    const {\n        client,\n        playerName,\n        formula,\n        result,\n        gameNumbers,\n        winner,\n        winnerFormula,\n        gameTime,\n        isCountingDown,\n        count,\n        handleTokenClick,\n        handleRemove,\n        handleClear,\n        handleNewGame,\n        handleLogout,\n\n    } = useGameLogic();\n\n    const navigate = useNavigate();\n\n\n    useGameExit(client);\n\n    return (\n        <Container>\n                <>\n                    <Header>\n                        <Title>24 Game - Singleplayer</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <GameTimer>\n                            {gameTime}\n                        </GameTimer>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>Game Solved!</h2>\n                            <div>Winner: {winner}</div>\n                            <WinnerFormula>\n                                Winning Solution: {winnerFormula}\n                            </WinnerFormula>\n                            <div>Time: {gameTime}</div>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaSingle>\n                        <CurrentPlayerAreaSingle>\n                            <NumbersGrid>\n                                {isCountingDown ? (\n                                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                                    <div className=\"text-4xl font-bold\">{count}</div>\n                                    </div>\n                                ) : (\n                                    gameNumbers.map((num, index) => (\n                                    <NumberButton \n                                    key={index} \n                                    onClick={() => handleTokenClick(num)}\n                                    >\n                                    {num}\n                                    </NumberButton>\n                                ))\n                                )}\n       \n                            </NumbersGrid>\n\n                            <FormulaDisplay>\n                                {formula || 'Start building your formula'}\n                            </FormulaDisplay>\n\n                            <ResultDisplay>\n                                Result: {result}\n                            </ResultDisplay>\n                            \n                            <OperatorGrid>\n                                {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                    <OperatorButton \n                                        key={op} \n                                        onClick={() => handleTokenClick(op)}\n                                    >\n                                        {op}\n                                    </OperatorButton>\n                                ))}\n                            </OperatorGrid>\n\n                            <ButtonGroup>\n                                <ControlButton onClick={handleClear}>\n                                    Clear\n                                </ControlButton>\n                                <ControlButton onClick={handleRemove}>\n                                    Undo\n                                </ControlButton>\n                                <ControlButton onClick={handleNewGame}>\n                                    New Game\n                                </ControlButton>\n                            </ButtonGroup>\n                        </CurrentPlayerAreaSingle>\n                    </GameAreaSingle>\n                </>\n            \n        </Container>\n    );\n};\n\nexport default GamePageSingle;","import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport GameClient from '../services/GameClient';\nimport { GameClientContext } from '../contexts/GameClientContext';\nimport { useGameExit } from '../hooks/useGameExit';\nimport { useGameLogic } from '../hooks/useGameLogic';\n\n\nimport {\n    NumberButton,\n    OperatorButton,\n    ControlButton,\n    NumbersGrid,\n    OperatorGrid,\n    ButtonGroup,\n    QuitButton,\n} from '../components/GameButtons';\n\nimport {\n    Container,\n    Header,\n    Title,\n    GameAreaMulti,\n    CurrentPlayerAreaMulti,\n    OtherPlayersArea,\n    PlayerCard,\n    PlayerHeader,\n    FormulaDisplay,\n    ResultDisplay,\n    Input,\n    WinnerDisplay,\n    WinnerFormula,\n    PlayerName,\n    GameTimer,\n    RevealingNumber\n} from '../components/GameStyles';\n\nimport { RoomInfo } from '../GameDefinitions';\n\n\nconst GamePageMulti: React.FC = () => {\n    const navigate = useNavigate();\n    const {\n        client,\n        playerName,\n        formula,\n        result,\n        error,\n        otherPlayers,\n        gameNumbers,\n        usedButtonIndices,\n        winner,\n        winnerFormula,\n        updateDisplay,\n        handleTokenClick,\n        handleNumberTokenClick,\n        handleRemove,\n        handleClear,\n        handleNewGame,\n        handleLogout,\n\n    } = useGameLogic();\n\n    const [timerActive, setTimerActive] = useState(false);\n    const [isCountingDown, setIsCountingDown] = useState(false);\n    const [count, setCount] = useState(3);\n    const [gameTime, setGameTime] = useState<number>(0);\n    const [revealedNumbers, setRevealedNumbers] = useState<boolean[]>([false, false, false, false]);\n\n    useEffect(() => {\n        let interval: NodeJS.Timeout;\n        if (timerActive && !winner) {\n            interval = setInterval(() => {\n                setGameTime(prev => prev + 1);\n            }, 1000);\n        }\n        return () => clearInterval(interval);\n    }, [timerActive, winner]);\n\n    useEffect(() => {\n        let pollingInterval: NodeJS.Timeout;\n        \n        const fetchGameState = async () => {\n          if (!client) return;\n          \n          try {\n            await client.fetchGamePage();\n            updateDisplay(client);\n          } catch (error) {\n            console.error('Error fetching game state:', error);\n          }\n        };\n        \n        if (client) {\n          // Initial fetch\n          fetchGameState();\n          \n          pollingInterval = setInterval(fetchGameState, 100);\n        }\n        \n        return () => {\n          if (pollingInterval) {\n            clearInterval(pollingInterval);\n          }\n        };\n      }, [client]);\n    \n    // Countdown effect\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (isCountingDown && count > 0) {\n            timer = setTimeout(() => setCount(count - 1), 1000);\n        } else if (isCountingDown && count === 0) {\n            // Start revealing numbers one by one\n            timer = setTimeout(() => {\n                let delay = 0;\n                const revealIntervals: NodeJS.Timeout[] = [];\n                \n                for (let i = 0; i < 4; i++) {\n                    const revealTimer = setTimeout(() => {\n                        setRevealedNumbers(prev => {\n                            const newState = [...prev];\n                            newState[i] = true;\n                            return newState;\n                        });\n                        \n                        // When all numbers are revealed, end countdown and start timer\n                        if (i === 3) {\n                            setTimeout(() => {\n                                setIsCountingDown(false);\n                                setCount(3);\n                                setRevealedNumbers([false, false, false, false]);\n                                setTimerActive(true);\n                            }, 500);\n                        }\n                    }, delay);\n                    \n                    revealIntervals.push(revealTimer);\n                    delay += 400; // 400ms between each number reveal\n                }\n                \n                return () => {\n                    revealIntervals.forEach(clearTimeout);\n                };\n            }, 1000);\n        }\n        return () => clearTimeout(timer);\n    }, [isCountingDown, count]);\n\n\n    useGameExit(client);\n\n\n\n    return (\n        <Container>\n                    <Header>\n                        <Title>24 Game - Multiplayer</Title>\n                        <PlayerName>Player: {playerName}</PlayerName>\n                        <GameTimer>\n                            {gameTime}\n                        </GameTimer>\n                        <QuitButton onClick={handleLogout}>Quit Game</QuitButton>\n                    </Header>\n\n                    {winner && (\n                        <WinnerDisplay>\n                            <h2>Game Solved!</h2>\n                            <div>Winner: {winner}</div>\n                            <WinnerFormula>\n                                Solution: {winnerFormula}\n                            </WinnerFormula>\n                            <div>Time: {gameTime}</div>\n                        </WinnerDisplay>\n                    )}\n\n                    <GameAreaMulti>\n                        <CurrentPlayerAreaMulti>\n                            {isCountingDown ? (\n                                <div style = {{\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    fontSize: '2rem',\n                                    fontWeight: 'bold',\n                                    height: '300px'\n                                }}>\n                                    {count}\n                                </div>\n                            ) : (\n                                <>\n                                    <NumbersGrid>\n                                        {gameNumbers.map((num, index) => (\n                                                <NumberButton \n                                                    key={index} \n                                                    onClick={() => handleNumberTokenClick(num, index)}\n                                                    disabled={usedButtonIndices.includes(index)}\n                                                    style={{\n                                                        backgroundColor: usedButtonIndices.includes(index) ? '#e0e0e0' : 'white',\n                                                        color: usedButtonIndices.includes(index) ? '#999' : '#333',\n                                                        cursor: usedButtonIndices.includes(index) ? 'not-allowed' : 'pointer'\n                                                    }}\n                                                >\n                                                    {num}\n                                                </NumberButton>\n                                        ))}\n                                    </NumbersGrid>\n\n                                    <FormulaDisplay>\n                                        {formula || 'Start building your formula'}\n                                    </FormulaDisplay>\n\n                                    <ResultDisplay>\n                                        Result: {result}\n                                    </ResultDisplay>\n                            \n                                    <OperatorGrid>\n                                        {['+', '-', '*', '/', '(', ')'].map((op) => (\n                                            <OperatorButton \n                                                key={op} \n                                                onClick={() => handleTokenClick(op)}\n                                            >\n                                                {op}\n                                            </OperatorButton>\n                                        ))}\n                                    </OperatorGrid>\n\n                                    <ButtonGroup>\n                                        <ControlButton onClick={handleClear}>\n                                            Clear\n                                        </ControlButton>\n                                        <ControlButton onClick={handleRemove}>\n                                            Undo\n                                        </ControlButton>\n                                        <ControlButton onClick={handleNewGame}>\n                                            New Game\n                                        </ControlButton>\n                                    </ButtonGroup>\n                                </>\n                            )}\n                        </CurrentPlayerAreaMulti>\n\n                        <OtherPlayersArea>\n                            <h3 style={{ marginTop: 0, marginBottom: '12px' }}>Other Players</h3>\n                            {Object.entries(otherPlayers).filter(([name]) => name !== playerName).length > 0 ? (\n                                Object.entries(otherPlayers).filter(([name]) => name !== playerName)\n                                .map(([name, cell]) => (\n                                    <PlayerCard key={name}>\n                                        <PlayerHeader>{name}</PlayerHeader>\n                                        <FormulaDisplay>{cell.formula || 'No formula yet'}</FormulaDisplay>\n                                        <ResultDisplay>Result: {cell.value || '0'}</ResultDisplay>\n                                    </PlayerCard>\n                                ))\n                            ) :(\n                                    <PlayerCard>\n                                        <div style={{ textAlign: 'center', padding: '20px 0' }}>\n                                            No other players in this Room\n                                        </div>\n                                    </PlayerCard>\n                                )}\n                        </OtherPlayersArea>\n                    </GameAreaMulti>\n            \n        </Container>\n    );\n};\n\nexport default GamePageMulti;","import { Navigate, Outlet} from 'react-router-dom';\nimport { useContext} from 'react';\nimport { GameClientContext } from '../contexts/GameClientContext';\n\nconst ProtectedRoutes = () => {\n    const {client} = useContext(GameClientContext);\n\n    return client ? <Outlet /> : <Navigate to=\"/\" replace/>;\n}\n\nexport default ProtectedRoutes;","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';  \nimport ModeSelection from './pages/ModeSelection';\nimport RoomSelection from './pages/RoomSelection';\nimport GamePageSingle from './pages/GamePageSingle'; \nimport GamePageMulti from './pages/GamePageMulti'; \nimport { GameClientProvider } from './contexts/GameClientContext';\nimport ProtectedRoutes from './components/ProtectedRoutes';\n\nfunction App() {\n  return (\n    <BrowserRouter basename = \"/24PointsGameOnline\">\n     <GameClientProvider>\n      <Routes>\n        <Route path=\"/\" element={<LoginPage />} />\n\n        <Route element={<ProtectedRoutes />}>\n          <Route path=\"/mode-selection\" element={<ModeSelection />} />\n          <Route path=\"/rooms\" element={<RoomSelection />} />\n          <Route path=\"/game/single\" element={<GamePageSingle />} />\n          <Route path=\"/game/multi/:roomId\" element={<GamePageMulti />} />\n        </Route>\n      </Routes>\n      </GameClientProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}